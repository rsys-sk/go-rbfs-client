openapi: 3.0.2
info:
  title: RBFS Operational State API
  description: |
    This contract describes the RBFS Operational State API contract defined by RBMS, the RtBrick Management System.
    This API is a _consumer-driven_ API, which means that all changes to this API **must be
    approved** by RBMS, the consumer of this API to avoid compatibility issues.
    
    The API is kept backwards-compatible and anyone is allowed to _use_ this API.
    
    The consumer of the API _must_ ignore additional attributes not explained in this specification.
    Additional attributes are _not_ considered violating backwards compatibility. In contrary,
    additional attributes allow extending the API while preserving backward compatibility.
  version: 1.0.0
  contact:
    name: Martin Steger
    email: martin@rtbrick.com
  license:
    name: Apache 2.0
tags:
  - name: Actions
    description: Global actions
  - name: Streams
    description: Streaming actions
  - name: BGP
    description: Border Gateway Protocol
  - name: IS-IS
    description: Intermediate System to Intermediate System Protocol
  - name: OSPF
    description: Open Shortest Path First Protocol
  - name: Interfaces
    description: physical and logical interfaces
  - name: LLDP
    description: Link Layer Discovery Protocol
  - name: System
    description: System hardware and software
  - name: Optics
    description: Optics Information
  - name: Transceivers
    description: Transceiver Information.
  - name: Access
    description: VLAN profiles
  - name: Subscriber
    description: Subscriber Sessions
  - name: L2BSA
    description: Layer 2 Bitstream Access
  - name: A10NSP
    description: A10NSP L2X configuration and accounting
  - name: PIM
    description: Protocol Independent Multicast
  - name: LDP
    description: Label Distribution Protocol
  - name: Neighbors
    description: ARP and NDP neighbors
  - name: RPKI-RTR
    description: RPKI-RTR protocol
  - name: cgNAT
    description: Carrier-grade NAT
  - name: flowspec
    description: Flowspec rules
  - name: L2VPN
    description: L2VPN pseudowires and cross-connects.
paths:
  /actions/ping:
    post:
      summary: Pings the given destination (ICMP ping).
      operationId: ping
      description: |
        Pings the given destination from the specified source IP or source IFL with the provided settings.

        Three options exist to specify the ping destination:

        1. Use `destination_ip` to specify the destination IP address in IPv6 or IPv4 format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified host name.
        3. Use `destination_a` to query the DNS for an A record for the specified host name.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Actions
      parameters:
        - in: query
          name: destination_ip
          description: Destination IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 address)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 address)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: source_ifl
          description: Source interface name.
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: count
          description: Number of pings.
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 65535
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: float
            default: 1.0
            minimum: 0.001
            maximum: 60.0
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 56
            minimum: 8
            maximum: 32768
        - in: query
          name: ttl
          description: IP TTL value
          required: false
          schema:
            type: integer
            default: 64
            minimum: 1
            maximum: 255
        - in: query
          name: tos
          description: IP ToS value
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 255
      responses:
        200:
          description: The ping statistics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingStatus"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /actions/ping-mpls:
    post:
      summary: Pings the given destination (LSPING).
      operationId: pingMpls
      description: |
        Pings the given destination FEC from the specified source IP with the provided settings.

        Three options exist to specify the ping destination:

        1. Use `destination_ip_fec` to specify the destination FEC in IPv6 or IPv4 CIDR format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified hostname. The hostprefix will be used as FEC.
        3. Use `destination_a` to query the DNS for an A record for the specified hostname. The hostprefix will be uses as FEC.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Actions
      parameters:
        - in: query
          name: fec_type
          description: The FEC type.
          required: false
          schema:
            type: string
            default: ldp
            enum:
              - ldp
              - isis
        - in: query
          name: destination_ip_fec
          description: Destination FEC in CIDR notion.
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 host prefix)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 host prefix)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: count
          description: Number of pings.
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 65535
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: integer
            default: 1
            minimum: 1
            maximum: 60
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 100
            minimum: 8
            maximum: 32768
      responses:
        200:
          description: The ping statistics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingStatus"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /actions/traceroute:
    post:
      summary: Traces the route to the given destination IP address.
      operationId: traceroute
      description: |
        Traces the route to the given destination from the specified source IP or source IFL with the provided settings.
        
        Three options exist to specify the traceroute destination:

        1. Use `destination_ip` to specify the destination IP address in IPv6 or IPv4 format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified host name.
        3. Use `destination_a` to query the DNS for an A record for the specified host name.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Actions
      parameters:
        - in: query
          name: destination_ip
          description: Destination IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 address)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 address)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: source_ifl
          description: Source interface name.
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: max_hops
          description: Maximum number of acceptable hops to reach the given destination.
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 255
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 56
            minimum: 8
            maximum: 32768
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: float
            default: 1.0
            minimum: 0.001
            maximum: 5.0
      responses:
        200:
          description: The traceroute statistics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Traceroute"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /streams/ping:
    post:
      summary: Pings the given destination IP address (ICMP ping).
      operationId: streamPing
      description: |
        Pings the given destination from the specified source IP or source IFL with the provided settings and
        streams the ping output line-by-line in plain text to the caller (ICMP ping).

        Three options exist to specify the ping destination:

        1. Use `destination_ip` to specify the destination IP address in IPv6 or IPv4 format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified host name.
        3. Use `destination_a` to query the DNS for an A record for the specified host name.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Streams
      parameters:
        - in: query
          name: destination_ip
          description: Destination IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 address)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 address)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: source_ifl
          description: Source interface name.
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: count
          description: Number of pings.
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 65535
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: float
            default: 1.0
            minimum: 0.001
            maximum: 60.0
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 56
            minimum: 8
            maximum: 32768
        - in: query
          name: ttl
          description: IP TTL value
          required: false
          schema:
            type: integer
            default: 64
            minimum: 1
            maximum: 255
        - in: query
          name: tos
          description: IP ToS value
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 255
      responses:
        200:
          description: The ping statistics.
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /streams/ping-mpls:
    post:
      summary: Pings the given destination (LSPING).
      operationId: streamPingMpls
      description: |
        Pings the given destination FEC from the specified source IP with the provided settings (LSPING).

        Three options exist to specify the ping destination:

        1. Use `destination_ip_fec` to specify the destination FEC in IPv6 or IPv4 CIDR format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified hostname. The hostprefix will be used as FEC.
        3. Use `destination_a` to query the DNS for an A record for the specified hostname. The hostprefix will be uses as FEC.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Streams
      parameters:
        - in: query
          name: fec_type
          description: The FEC type.
          required: false
          schema:
            type: string
            default: ldp
            enum:
              - ldp
              - isis
        - in: query
          name: destination_ip_fec
          description: Destination FEC in CIDR notion.
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 host prefix)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 host prefix)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: count
          description: Number of pings.
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 65535
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: integer
            default: 1
            minimum: 1
            maximum: 60
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 100
            minimum: 8
            maximum: 32768
      responses:
        200:
          description: The ping statistics.
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /streams/traceroute:
    post:
      summary: Traces the route to the given destination IP address.
      operationId: streamTraceroute
      description: |
        Traces the route to the given destination from the specified source IP or source IFL with the provided settings and
        streams the traceroute output line-by-line in plain text to the caller.

        Three options exist to specify the traceroute destination:

        1. Use `destination_ip` to specify the destination IP address in IPv6 or IPv4 format.
        2. Use `destination_aaaa` to query the DNS for an AAAA record for the specified host name.
        3. Use `destination_a` to query the DNS for an A record for the specified host name.

        The precedence is in the above ordering if multiple destinations are specified.
        An error is returned if no destination is specified.
      tags:
        - Streams
      parameters:
        - in: query
          name: destination_ip
          description: Destination IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: destination_aaaa
          description: Destination hostname to query DNS for an AAAA record (IPv6 address)
          required: false
          schema:
            type: string
        - in: query
          name: destination_a
          description: Destination hostname to query DNS for an A record (IPv4 address)
          required: false
          schema:
            type: string
        - in: query
          name: source_ip
          description: Source IPv4 or IPv6 address
          required: false
          schema:
            type: string
        - in: query
          name: source_ifl
          description: Source interface name.
          required: false
          schema:
            type: string
        - in: query
          name: instance_name
          description: Routing instance name
          required: false
          schema:
            type: string
            default: default
        - in: query
          name: max_hops
          description: Maximum number of acceptable hops to reach the given destination.
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 255
        - in: query
          name: size
          description: Packet payload size in bytes.
          required: false
          schema:
            type: integer
            default: 56
            minimum: 8
            maximum: 32768
        - in: query
          name: interval
          description: Ping interval in seconds.
          required: false
          schema:
            type: number
            format: float
            default: 1.0
            minimum: 0.001
            maximum: 5.0
      responses:
        200:
          description: The traceroute statistics.
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /bgp/peerings:
    get:
      summary: Lists all BGP peerings grouped by instance.
      operationId: getBGPPeerings
      description: |
        Provides a list of all BGP peerings of all BGP instances
        including the total count of received and sent prefixes.
      tags:
        - BGP
      responses:
        200:
          description: List of BGP peerings grouped by instances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BGPInstancePeerings"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /bgp/instances:
    get:
      summary: Lists all BGP instances.
      operationId: getBGPInstances
      description: |
        Lists all BGP instances, including 
        auto-discovered fabric peerings.
      tags:
        - BGP
      responses:
        200:
          description: |
            List of BGP instances. 
            Returns an empty array if no BGP instances exist.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BGPInstanceRef"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /bgp/instances/{instance_name}:
    get:
      summary: Get BGP instance details.
      operationId: getBGPInstance
      description: |
        Provides BGP instance details including 
        information about the configured peerings.
      tags:
        - BGP
      parameters:
        - in: path
          name: instance_name
          description: BGP routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        200:
          description: The BGP instance details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BGPInstance"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /bgp/instances/{instance_name}/peerings/clear:
    post:
      summary: Clears all instance BGP peerings.
      operationId: clearBGPInstancePeerings
      description: |
        Clears all BGP peerings associated with the specified BGP instance.
        The API confirms that the clear request has been accepted and tells
        RBFS to re-establish the BGP peerings.  
        This is an asynchronous operation.
      tags:
        - BGP
      parameters:
        - in: path
          name: instance_name
          description: BGP routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        202:
          description: |
            Accepted the clearing request. 
            Watch the BGP peering states to track the clearing progress.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /bgp/instances/{instance_name}/peerings:
    get:
      summary: Provides BGP peering details
      operationId: getBGPInstancePeerings
      description: |
        Returns BGP peering details including summary statistics 
        of received and sent prefixes per AFI/SAFI.
      tags:
        - BGP
      parameters:
        - in: path
          name: instance_name
          description: BGP routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: peer_ip
          description: Peer IPv4 or IPv6 address.
          required: true
          schema:
            type: string
        - in: query
          name: source_ip
          description: Optional filter for source IP address.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The BGP peering details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BGPPeering"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /bgp/instances/{instance_name}/peerings/{peer_ip}:
    get:
      summary: Provides BGP peering details
      operationId: getBGPPeering
      description: |
        Returns BGP peering details including summary statistics 
        of received and sent prefixes per AFI/SAFI.
      tags:
        - BGP
      parameters:
        - in: path
          name: instance_name
          description: BGP routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: peer_ip
          description: Peer IPv4 or IPv6 address.
          required: true
          schema:
            type: string
        - in: query
          name: source_ip
          description: Optional filter for source IP address.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The BGP peering details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BGPPeering"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /bgp/instances/{instance_name}/peerings/{peer_ip}/clear:
    post:
      summary: Clears a BGP peering.
      operationId: clearBGPPeering
      description: |
        Clears a BGP peerings.
        The management API confirms that the clear request has been accepted
        and delegates the clear request to RBFS.
        This is an asynchronous operation.
      tags:
        - BGP
      parameters:
        - in: path
          name: instance_name
          description: BGP routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: peer_ip
          description: Peer IPv4 or peer IPv6 address.
          required: true
          schema:
            type: string
        - in: query
          name: source_ip
          description: Optional filter for source IP address.
          required: false
          schema:
            type: string
      responses:
        202:
          description: Accepted the request to clear the BGP peering. Watch the BGP peering state to track the clearing progress.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /isis/instances:
    get:
      summary: Lists all IS-IS instances.
      operationId: getISISInstances
      description: |
        Lists all IS-IS instances including administrative and operational state information.
      tags:
        - IS-IS
      responses:
        200:
          description: The IS-IS instances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ISISInstanceRef"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /isis/neighbors:
    get:
      summary: Lists all IS-IS neighbors.
      operationId: getISISNeighbors
      description: |
        Lists all IS-IS neighbors grouped by IS-IS instance.
      tags:
        - IS-IS
      responses:
        200:
          description: The IS-IS neighbors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ISISInstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /isis/interfaces:
    get:
      summary: Lists all IS-IS interfaces.
      operationId: getISISInterfaces
      description: |
        Lists all IS-IS interfaces grouped by IS-IS instances.
      tags:
        - IS-IS
      responses:
        200:
          description: The IS-IS interfaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ISISInstanceInterfaces"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /isis/instances/{instance_name}/interfaces/{ifl_name}:
    get:
      summary: Shows details of a IS-IS interface.
      operationId: getISISInterface
      description: |
        Shows details of an IS-IS interface including statistics.
      tags:
        - IS-IS
      parameters:
        - in: path
          name: instance_name
          description: The IS-IS instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The IS-IS interface details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ISISInstanceInterface"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /isis/instances/{instance_name}:
    get:
      summary: Shows IS-IS instance details.
      operationId: getISISInstance
      description: |
        Shows the details of an IS-IS instance including the discovered neighbors.
      tags:
        - IS-IS
      parameters:
        - in: path
          name: instance_name
          description: The IS-IS instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        200:
          description: The IS-IS instance details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ISISInstance"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /isis/instances/{instance_name}/neighbors/clear:
    post:
      summary: Clears the IS-IS instance adjacency.
      operationId: clearISISInstanceNeighbors
      description: |
        Clears all IS-IS instance sessions to re-establish them.
        Watch the IS-IS neighbors state to track the session re-establishment progress.
      tags:
        - IS-IS
      parameters:
        - in: path
          name: instance_name
          description: The IS-IS instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        202:
          description: Clear request accepted.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /isis/instances/{instance_name}/neighbors/{ifl_name}:
    get:
      summary: Shows details of a IS-IS neighbor.
      operationId: getISISNeighbor
      description: |
        Shows details of an IS-IS neighbor including statistics.
      tags:
        - IS-IS
      parameters:
        - in: path
          name: instance_name
          description: The IS-IS instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: ifl_name
          description: The logical interface the neighbor is connected to.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The IS-IS neighbor details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ISISInstanceNeighbor"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /isis/instances/{instance_name}/neighbors/{ifl_name}/clear:
    post:
      summary: Clears all IS-IS neighbors connected through the specified logical interface.
      operationId: clearISISInterfaceNeighbors
      description: |
        Clears the IS-IS neighbor to re-establish the adjacency.
        Watch the neighbor state to track the resetablishment progress.
      tags:
        - IS-IS
      parameters:
        - in: path
          name: instance_name
          description: The IS-IS instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: ifl_name
          description: The logical interface the neighbor is connected to.
          required: true
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        202:
          description: The IS-IS neighbor has been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances:
    get:
      summary: Lists summary of all OSPF instances
      operationId: getOSPFInstances
      description: Lists all OSPF instances with some global administrative parameters and their areas.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OSPFInstanceSummary"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}:
    get:
      summary: Shows OSPF instance details
      operationId: getOSPFInstance
      description: Shows an OSPF instance including its interfaces and neighbors.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceDetails"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/interfaces:
    get:
      summary: Lists all OSPF interfaces
      operationId: getOSPFInterfaces
      description: Lists all OSPF instances with their interfaces.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OSPFInstanceInterfaces"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}/interfaces:
    get:
      summary: Lists interfaces in an OSPF instance
      operationId: getOSPFInstanceInterfaces
      description: Shows an OSPF instance with its interfaces.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceInterfaces"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}/interfaces/{ifl_name}:
    get:
      summary: Shows an OSPF interface
      operationId: getOSPFInterface
      description: Shows a single OSPF interface.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceInterface"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/neighbors:
    get:
      summary: List all OSPF neighbors
      operationId: getOSPFNeighbors
      description: Lists all OSPF instances with their neighbors.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}/neighbors:
    get:
      summary: Lists neighbors in an OSPF instance
      operationId: getOSPFInstanceNeighbors
      description: Shows an OSPF instance with its neighbors.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}/neighbors/{ifl_name}:
    get:
      summary: Shows an OSPF neighbor
      operationId: getOSPFNeighbor
      description: Shows a single OSPF neighbor.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFInstanceNeighbor"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospf/instances/{instance_name}/neighbors/{ifl_name}/clear:
    post:
      summary: Clears an OSPF neighbor
      operationId: clearOSPFNeighbor
      description: Resets an OSPF neighbor relationship, so that it needs to be re-established.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        202:
          description: The request has been successful and the neighbor has been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /ospf/instances/{instance_name}/area/{area_id}/neighbors/{ifl_name}/clear:
    post:
      deprecated: true
      summary: Clears an OSPF neighbor
      operationId: clearOSPFAreaNeighbor
      description: Resets an OSPF neighbor relationship, so that it needs to be re-established.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: area_id
          description: The area in which the neighbor resides.
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        202:
          description: The request has been successful and the neighbor has been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances:
    get:
      summary: Lists summary of all OSPFv3 instances
      operationId: getOSPFv3Instances
      description: Lists all OSPFv3 instances with some global administrative parameters and their areas.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OSPFv3InstanceSummary"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}:
    get:
      summary: Shows OSPFv3 instance details
      operationId: getOSPFv3Instance
      description: Shows an OSPFv3 instance including its interfaces and neighbors.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPFv3 instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPFv3 instance ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceDetails"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/interfaces:
    get:
      summary: Lists all OSPFv3 interfaces
      operationId: getOSPFv3Interfaces
      description: Lists all OSPFv3 instances with their interfaces.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OSPFv3InstanceInterfaces"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}/interfaces:
    get:
      summary: Lists interfaces in an OSPFv3 instance
      operationId: getOSPFv3InstanceInterfaces
      description: Shows an OSPFv3 instance with its interfaces.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPFv3 instance ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceInterfaces"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}/interfaces/{ifl_name}:
    get:
      summary: Shows an OSPFv3 interface
      operationId: getOSPFv3Interface
      description: Shows a single OSPFv3 interface.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPFv3 instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPFv3 instance area_id:.
          required: true
          schema:
            type: integer
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceInterface"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/neighbors:
    get:
      summary: List all OSPFv3 neighbors
      operationId: getOSPFv3Neighbors
      description: Lists all OSPFv3 instances with their neighbors.
      tags:
        - OSPF
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}/neighbors:
    get:
      summary: Lists neighbors in an OSPFv3 instance
      operationId: getOSPFv3InstanceNeighbors
      description: Shows an OSPFv3 instance with its neighbors.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPFv3 instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPFv3 instance ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}/neighbors/{ifl_name}:
    get:
      summary: Shows an OSPFv3 neighbor
      operationId: getOSPFv3Neighbor
      description: Shows a single OSPF neighbor.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPFv3 instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPFv3 instance ID.
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSPFv3InstanceNeighbor"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /ospfv3/instances/{instance_name}/{instance_id}/neighbors/{ifl_name}/clear:
    post:
      summary: Clears an OSPFv3 neighbor
      operationId: clearOSPFv3Neighbor
      description: Resets an OSPFv3 neighbor relationship, so that it needs to be re-established.
      tags:
        - OSPF
      parameters:
        - in: path
          name: instance_name
          description: The OSPF instance name.
          required: true
          schema:
            type: string
        - in: path
          name: instance_id
          description: The OSPF instance ID.
          required: true
          schema:
            type: integer
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        202:
          description: The request has been successful and the neighbor has been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /optics:
    get:
      summary: Lists all attached optics.
      operationId: getOptics
      description: |
        Provides a list of all single-form factor pluggable (SFP) optics
        attached to this switch.
      tags:
        - Optics
      deprecated: true
      responses:
        200:
          description: The list of discovered optics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Optic"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /optics/{ifp_name}:
    get:
      summary: Lists details of an attached optic.
      operationId: getOptic
      description: |
        Provides a list of all single-form factor pluggable (SFP) optics
        attached to this switch.
      tags:
        - Optics
      deprecated: true
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of discovered optics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Optic"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /optics/{ifp_name}/disable:
    post:
      summary: Disable the laser.
      operationId: disableLaser
      description: |
        Disables the laser of the optic attached to the given physical port.
        Be aware that disabling the laser raises a LoS alert on the remote optic.
      tags:
        - Optics
      deprecated: true
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: string
      responses:
        204:
          description: The laser has been disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /optics/{ifp_name}/enable:
    post:
      summary: Enables the laser.
      operationId: enableLaser
      description: |
        Enables the laser of the optic attached to the given port.
      tags:
        - Optics
      deprecated: true
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: "string"
      responses:
        204:
          description: The laser has been enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /transceivers:
    get:
      summary: Lists all attached transceivers.
      operationId: getTransceivers
      description: |
        Provides a list of all single-form factor pluggable (SFP) transceivers
        attached to this switch.
      tags:
        - Transceivers
      responses:
        200:
          description: The list of discovered transceivers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transceiver"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /transceivers/{ifp_name}:
    get:
      summary: Lists details of an attached transceiver.
      operationId: getTransceiver
      description: |
        Provides a list of all single-form factor pluggable (SFP) transceiver
        attached to this switch.
      tags:
        - Transceivers
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of discovered transceiver.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transceiver"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /transceivers/{ifp_name}/disable:
    post:
      summary: Disable the laser.
      operationId: disableTransceiverLaser
      description: |
        Disables the laser of the transceiver attached to the given physical port.
        Be aware that disabling the laser raises a LoS alert on the remote transceiver.
      tags:
        - Transceivers
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: string
      responses:
        204:
          description: The laser has been disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /transceivers/{ifp_name}/enable:
    post:
      summary: Enables the laser.
      operationId: enableTransceiverLaser
      description: |
        Enables the laser of the transceiver attached to the given port.
      tags:
        - Transceivers
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface (=port) name.
          required: true
          schema:
            type: "string"
      responses:
        204:
          description: The laser has been enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers:
    get:
      summary: Lists all matching subscriber sessions.
      operationId: getSubscribers
      description: |
        Lists all matching active subscriber sessions.
      tags:
        - Subscriber
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface name.
          required: false
          schema:
            type: "string"
        - in: query
          name: ifl_name
          description: The name of the subscriber's logical interface.
          required: false
          schema:
            type: "string"
        - in: query
          name: outer_vlan
          description: The outer VLAN tag.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: anp_vlan
          description: The ANP-VLAN ID (for L2BSA subscribers).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan
          description: The inner VLAN tag.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: subscriber_id
          description: The unique subscriber ID.
          required: false
          schema:
            $ref: "#/components/schemas/SubscriberId"
        - in: query
          name: accounting_session_id
          description: The accounting session ID of the subscriber session.
          required: false
          schema:
            type: string
        - in: query
          name: subscriber_user_name
          description: The subscriber's user name.
          required: false
          schema:
            type: string
        - in: query
          name: subscriber_user_name_matches
          description: Regular expression the subscriber user name must match.
          required: false
          schema:
            type: string
        - in: query
          name: agent_remote_id
          description: The agent remote ID of the subscriber session.
          required: false
          schema:
            type: string
        - in: query
          name: agent_remote_id_matches
          description: Regular expression the agent remote ID must match.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id
          description: The agent circuit ID of the subscriber session.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id_matches
          description: Regular expression the agent circuit ID must match.
          required: false
          schema:
            type: string
        - in: query
          name: access_type
          description: The access type of the subscriber session.
          required: false
          schema:
            $ref: "#/components/schemas/SubscriberAccessType"
        - in: query
          name: limit
          description: Limits the number of returned subscriber sessions to the given value.
          required: false
          schema:
            type: integer
        - in: query
          name: cursor
          description: Starts reading subscriber sessions from the given subscriber ID.
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of matching subscriber sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriberSessionRef"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/statistics:
    get:
      summary: Returns the subscriber session summary statistics.
      operationId: getSubscriberSessionStatistics
      description: |
        Returns the number of subscriber sessions grouped by the access type (IPoE, PPPoE, L2TP, L2BSA and test), 
        the session state (setup, established, terminating) and the physical interface as well as aggregated counts.
        The aggregated counts include the total number of sessions per physical interface and state as well as 
        the number of sessions per access type and state, and the total session count per state for the entire switch.
      tags:
        - Subscriber
      responses:
        200:
          description: The subscriber sessions statistic.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberSessionStatistics"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/statistics/{ifp_name}:
    get:
      summary: Returns the subscriber session statistics for a physical interface.
      operationId: getIfpSubscriberSessionStatistics
      description: |
        Returns the number of subscriber sessions grouped by access type (IPoE, PPPoE, L2TP, L2BSA and test), 
        the session state (setup, established, terminating) as well as the total session count grouped by the session state.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IfpName"
      responses:
        200:
          description: The subscriber sessions statistic.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IfpSubscriberSessionStatistics"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/terminate:
    post:
      summary: Terminates all matching subscriber sessions.
      operationId: clearSubscribers
      description: |
        Terminates all matching active subscriber sessions.
      tags:
        - Subscriber
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface name.
          required: false
          schema:
            type: "string"
        - in: query
          name: ifl_name
          description: The name of the subscriber's logical interface.
          required: false
          schema:
            type: "string"
        - in: query
          name: outer_vlan
          description: Outer VLAN tag.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: anp_vlan
          description: ANP VLAN tag (for L2BSA subscribers).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan
          description: Inner VLAN tag.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: subscriber_id
          description: A unique subscriber ID
          required: false
          schema:
            $ref: "#/components/schemas/SubscriberId"
        - in: query
          name: accounting_session_id
          description: The accounting session ID of the subscriber session.
          required: false
          schema:
            type: string
        - in: query
          name: subscriber_user_name
          description: The subscriber user name of the subscriber session.
          required: false
          schema:
            type: string
        - in: query
          name: subscriber_user_name_matches
          description: Regular expression the subscriber user name must match.
          required: false
          schema:
            type: string
        - in: query
          name: agent_remote_id
          description: The agent remote ID of the subscriber sessions.
          required: false
          schema:
            type: string
        - in: query
          name: agent_remote_id_matches
          description: Regular expression the agent remote ID must match.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id
          description: The agent circuit ID of the subscriber sessions.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id_matches
          description: Regular expression the agent circuit ID must match.
          required: false
          schema:
            type: string
        - in: query
          name: access_type
          required: false
          schema:
            $ref: "#/components/schemas/SubscriberAccessType"
      responses:
        202:
          description: Scheduled termination of all matching subscriber sessions.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}:
    get:
      summary: Shows subscriber session details.
      operationId: getSubscriber
      description: |
        Provides subscriber session details including accounting information, 
        logical interface information, VLAN information, L2TP or PPPoE session 
        information, physical interface information, and access line information.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      responses:
        200:
          description: The active subscriber session details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberSession"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Terminates the subscriber session.
      operationId: clearSubscriber
      description: |
        Trigger the asynchronous subscribers termination and 
        disconnect corresponding sessions.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
        - in: query
          name: force
          description: Forces subscriber session termination.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        202:
          description: Subscriber termination triggered.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}/update:
    post:
      summary: Dynamically update the specified subscriber.
      operationId: updateSubscriber
      description: |
        Dynamically update the specified subscriber with settings such as 
        service profiles, QoS parameters, IGMP, and more. This API behaves 
        similarly to a RADIUS CoA request, where all attributes in a single 
        API call are processed together, just like in a single CoA message. 
        The behavior matches that of the corresponding CLI command.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      requestBody:
        description: Subscriber attributes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriberUpdate'
      responses:
        204:
          description: Subscriber update successful.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}/enableLI:
    post:
      summary: Enables lawful interception for the specified subscriber.
      operationId: enableLawfulInterceptionSubscriber
      description: |
        Enables lawful interception (LI) for the specified subscriber 
        with the specified mediation device, direction and LI identifier.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
        - in: query
          name: id
          description: The LI request ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4194303
        - in: query
          name: direction
          description: The direction of traffic being intercepted.
          required: true
          schema:
            type: string
            enum:
              - EGRESS
              - INGRESS
              - BOTH
        - in: query
          name: med_ip
          description: Mediation device IP address.
          required: true
          schema:
            type: string
            format: ipv4
        - in: query
          name: med_port
          description: Meditation device port.
          required: true
          schema:
            type: integer
            minimum: 49152
            maximum: 65535
        - in: query
          name: med_instance
          description: Meditation device routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        204:
          description: Lawful interception enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}/disableLI:
    post:
      summary: Disables lawful interception for the specified subscriber.
      operationId: disableLawfulInterceptionSubscriber
      description: |
        Disables lawful interception (LI) for the specified subscriber 
        with the specified mediation device, direction and LI identifier.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
        - in: query
          name: id
          description: The LI request ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4194303
      responses:
        204:
          description: Lawful interception disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}/access-line-info:
    get:
      summary: Returns access line information.
      operationId: getAccessLineInfo
      description: |
        Returns the access line information for the given subscriber.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      responses:
        200:
          description: The counter values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessLineInfo"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/{subscriber_id}/adjusted-accounting:
    get:
      summary: Returns adjusted accounting counter values.
      operationId: getAjdustedAccountingValues
      description: |
        Computes the adjusted accounting counter values for a given subscriber.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      responses:
        200:
          description: The counter values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberAdjustedAccounting"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/history:
    get:
      summary: Lists the subscriber history.
      operationId: getSubscriberHistory
      description: |
        Lists the subscriber history to examine why subscribers got disconnected in the past 24 hours.
        Returns all history entries matching the given filter.
      tags:
        - Subscriber
      parameters:
        - in: query
          name: subscriber_user_name
          description: Filter for subscribers with the given user name.
          required: false
          schema:
            type: string
        - in: query
          name: subscriber_user_name_matches
          description: Filter for subsribers matching the given user name pattern.
          required: false
          schema:
            type: string
        - in: query
          name: ifp_name
          description: Filter for subscribers terminated on the specified physical interface.
          required: false
          schema:
            type: "string"
        - in: query
          name: inner_vlan
          description: Filter for subscribers with the specified inner VLAN.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: outer_vlan
          description: Filter for subscribers terminated with the specified outer VLAN.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: subscriber_id
          description: Filter for subscriber with the specified subscriber ID.
          required: false
          schema:
            type: number
        - in: query
          name: access_type
          description: Filter for subscribers with the specified access type.
          required: false
          schema:
            type: string
            enum:
              - PPPoE
              - L2TP
              - IPoE
              - L2BSA
              - Test
        - in: query
          name: agent_remote_id
          description: Filter for subscribers with the specified agent remote ID.
          required: false
          schema:
            type: string
        - in: query
          name: agent_remote_id_matches
          description: Filter for subscribers with agent remote IDs matching the given pattern.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id
          description: Filter for subscribers with the specified agent circuit ID.
          required: false
          schema:
            type: string
        - in: query
          name: agent_circuit_id_matches
          description: Filter for subscribers with agent circuit IDs matching the given pattern.
          required: false
          schema:
            type: string
      responses:
        200:
          description: |
            A list of all matching terminated subscribers.
            Returns an empty array if no matching history items exist.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubscriberHistory"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/test-aaa:
    get:
      summary: Lists all test subscribers.
      operationId: getTestSubscribers
      description: Reads all test subscriber objects from the Test AAA request table.
      tags:
        - Subscriber
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestAaaObject'
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    post:
      summary: Adds test subscribers.
      operationId: addTestSubscribers
      description: Injects test subscribers into the Test AAA request table.
      tags:
        - Subscriber
      requestBody:
        description: List of subscriber attribute objects.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestAaaObject'
      responses:
        204:
          description: The test subscribers have been added.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Replaces all test subscribers.
      operationId: storeTestSubscribers
      description: Flushes the Test AAA request table and adds the test subscribers.
      tags:
        - Subscriber
      requestBody:
        description: List of subscriber attribute objects.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TestAaaObject'
      responses:
        204:
          description: The test subscribers have updated.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /subscribers/test-aaa/{subscriber_id}:
    put:
      summary: Adds or updates a test subscriber.
      operationId: storeTestSubscriber
      description: Injects a test subscriber into the Test AAA request table.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      requestBody:
        description: Subscriber attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAaaObject'
      responses:
        204:
          description: A test subscriber has been added or updated.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Deletes a test subscriber.
      operationId: removeTestSubscriber
      description: Removes a test subscriber from the Test AAA request table.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: subscriber_id
          description: The subscriber ID.
          required: true
          schema:
            $ref: "#/components/schemas/SubscriberId"
      responses:
        204:
          description: A test subscriber has been deleted.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /subscribers/l2bsa/{ifp_name}/{anp}:
    get:
      summary: Shows L2BSA subscriber session details.
      operationId: getL2BSASubscriber
      description: |
        Provides L2BSA subscriber details including accounting information, 
        logical interface information, VLAN information, physical interface 
        information, and access line information.

        This commands returns the same output as `GET /subscribers/{subscriber_id}`
        just with a different key using interface name and ANP VLAN ID instead
        of subscriber ID.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        200:
          description: The active L2BSA subscriber session details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberSession"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Terminates the L2BSA subscriber session.
      operationId: clearL2BSASubscriber
      description: |
        Trigger the asynchronous subscribers termination.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        202:
          description: Subscriber termination triggered.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /subscribers/l2bsa/{ifp_name}/{anp}/adjusted-accounting:
    get:
      summary: Get adjusted accounting counter values.
      operationId: getL2BSASubscriberAdjustedAccountingValues
      description: |
        Computes the adjusted accounting counter values for a given L2BSA subscriber.

        This commands returns the same output as `GET /subscribers/{subscriber_id}/adjusted-accounting`
        just with a different key using interface name and ANP VLAN ID instead
        of subscriber ID.
      tags:
        - Subscriber
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        200:
          description: The counter values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberAdjustedAccounting"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces:
    get:
      summary: Lists all physical interfaces and their logical interfaces.
      operationId: getInterfaces
      description: |
        Lists all physical interfaces and their logical interfaces including their administrative state, 
        operational state, configured bandwidth and MAC address.
        Subscriber interfaces are not included in the response.
      tags:
        - Interfaces
      responses:
        200:
          description: The physical interface and its logical interfaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhysicalInterfaceSummaryRef"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{ifp_name}:
    get:
      summary: Shows a physical interface and its logical interfaces.
      operationId: getInterface
      description: |
        Shows a physical interface an its logical interfaces including 
        their operational and administrative states, packet and byte counters,
        as well as configured speed, IP addresses and other settings.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IfpName"
      responses:
        200:
          description: The physical interface summary.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhysicalInterfaceSummary"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{if_name}/enable:
    post:
      summary: Enables a physical or a logical interface name.
      operationId: enableInterface
      description: |
        Enables the specified physical or a logical interface.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: if_name
          required: true
          description: The physical or logical interface name.
          schema:
            $ref: "#/components/schemas/IfName"
      responses:
        202:
          description: The request to enable the interface has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{if_name}/disable:
    post:
      summary: Disables a physical or a logical interface name.
      operationId: disableInterface
      description: |
        Disables the specified physical or a logical interface.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: if_name
          required: true
          description: The physical or logical interface name.
          schema:
            $ref: "#/components/schemas/IfName"
      responses:
        202:
          description: The request to disable the interface has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{if_name}/startCapture:
    post:
      summary: Starts physical or logical interface traffic capturing.
      operationId: startTrafficCapture
      description: |
        Starts capturing physical or logical interface traffic to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: if_name
          required: true
          description: The physical or logical interface name.
          schema:
            $ref: "#/components/schemas/IfName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: The request to start traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{if_name}/stopCapture:
    post:
      summary: Stops physical or logical interface traffic capturing.
      operationId: stopTrafficCapture
      description: |
        Stops capturing physical or logical interface traffic to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: if_name
          required: true
          description: The physical or logical interface name.
          schema:
            $ref: "#/components/schemas/IfName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: The request to stop traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/{if_name}/clearCounters:
    post:
      summary: Clears physical or logical interface counters.
      operationId: clearInterfaceCounters
      description: |
        Clears the counters of a physical or logical interface with the given name.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: if_name
          required: true
          description: The physical or logical interface name.
          schema:
            $ref: "#/components/schemas/IfName"
      responses:
        204:
          description: The counters have been cleared.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals:
    get:
      summary: Lists all physical interfaces.
      operationId: getPhysicalInterfaces
      description: |
        List all physical interfaces and their respective operational state.
      tags:
        - Interfaces
      parameters:
        - in: query
          name: counters
          description: A flag whether counter values shall be included.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: List of physical interfaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhysicalInterface"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}:
    get:
      summary: Shows a physical interface.
      operationId: getPhysicalInterface
      description: |
        Shows a physical interface including its operational state and administrative states and configured bandwidth.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: optics
          description: |
            Include optic informations in the response.
            
            NOTE: Use the /optics endpoint to obtain optics information.
          deprecated: true
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: The physical interface details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhysicalInterfaceDetail"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}/disable:
    post:
      summary: Disables a physical interface.
      operationId: disablePhysicalInterface
      description: |
        Disables a physical interface in the running-configuration.
        Disabling an interface fires events including deferred events which are processed asynchronously. Disabling a physical interface is therefore considered an asynchronous operation.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IfpName"
      responses:
        202:
          description: The physical interface has been disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}/enable:
    post:
      summary: Enables a physical interface.
      operationId: enablePhysicalInterface
      description: |
        Enables a physical interface in the running-configuration.
        Enables an interface fires events including deferred events which are processed asynchronously.
        Also certain services, like BGP peerings or IS-IS adjacencies for example, will be enabled after a physical interface has been enabled. Enabling a physical interface is therefore considered an asynchronous operation.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IfpName"
      responses:
        202:
          description: The physical interface has been enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}/startCapture:
    post:
      summary: Starts physical interface traffic capturing.
      operationId: startPhysicalInterfaceTrafficCapture
      description: |
        Starts capturing physical interface traffic to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: |
            The request to start traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}/stopCapture:
    post:
      summary: Stops physical interface traffic capturing.
      operationId: stopPhysicalInterfaceTrafficCapture
      description: |
        Stops traffic capturing of a physical interface to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: |
            The request to start traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/physicals/{ifp_name}/clearCounters:
    post:
      summary: Clears physical interface counters.
      operationId: clearPhysicalInterfaceCounters
      description: |
        Clears the counters of the physical interface with the given name.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            $ref: "#/components/schemas/IfpName"
      responses:
        204:
          description: The counters have been cleared.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}:
    get:
      summary: Shows a logical interface.
      operationId: getLogicalInterface
      description: |
        Provides details of a logical interface including VLANs, IP addresses, administrative and operational states and counters.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          required: true
          description: The logical interface name.
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        200:
          description: The logical interface.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogicalInterface"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/disable:
    post:
      summary: Disables a logical interface.
      operationId: disableLogicalInterface
      description: |
        Disables a logical interface in the running-configuration.
        Disabling an interface fires events including deferred events which are processed asynchronously. 
        Disabling a logical interface is therefore considered an asynchronous operation.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        202:
          description: The logical interface has been disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/enable:
    post:
      summary: Enables a logical interface.
      operationId: enableLogicalInterface
      description: |
        Enables a logical interface in the running-configuration.
        Enables an interface fires events including deferred events which are processed asynchronously.
        Also certain services, like BGP peerings or IS-IS adjacencies for example, will be enabled after a logical interface has been enabled. 
        Enabling a logical interface is therefore considered an asynchronous operation.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        202:
          description: The logical interface has been enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/startCapture:
    post:
      summary: Starts logical interface traffic capturing.
      operationId: startLogicalInterfaceTrafficCapture
      description: |
        Starts capturing logical interface traffic to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          required: true
          description: The logical interface name.
          schema:
            $ref: "#/components/schemas/IflName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: |
            The request to start traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/stopCapture:
    post:
      summary: Stops logical interface traffic capturing.
      operationId: stopLogicalInterfaceTrafficCapture
      description: |
        Stops traffic capturing of a logical interface to a file.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          required: true
          description: The logical interface name.
          schema:
            $ref: "#/components/schemas/IflName"
        - in: query
          name: direction
          required: true
          description: The direction of traffic to be captured.
          schema:
            type: string
            default: BOTH
            enum:
              - INGRESS
              - EGRESS
              - BOTH
        - in: query
          name: file_name
          required: true
          description: The capture file name.
          schema:
            type: string
      responses:
        202:
          description: |
            The request to stop traffic capturing has been accepted.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/clearCounters:
    post:
      summary: Clears logical interface counters.
      operationId: clearLogicalInterfaceCounters
      description: |
        Clears the counters of the logical interface with the given name.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          required: true
          description: The logical interface name.
          schema:
            type: string
      responses:
        204:
          description: The counters have been cleared.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/enableLI:
    post:
      summary: Enables lawful interception for the specified logical interface.
      operationId: enableLawfulInterceptionIFL
      description: |
        Enables lawful interception (LI) for the specified logical interface 
        with the specified mediation device, direction and LI identifier.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          description: The logical-interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IflName"
        - in: query
          name: id
          description: The LI request ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4194303
        - in: query
          name: direction
          description: The direction of traffic being intercepted.
          required: true
          schema:
            type: string
            enum:
              - EGRESS
              - INGRESS
              - BOTH
        - in: query
          name: med_ip
          description: Mediation device IP address.
          required: true
          schema:
            type: string
            format: ipv4
        - in: query
          name: med_port
          description: Meditation device port.
          required: true
          schema:
            type: integer
            minimum: 49152
            maximum: 65535
        - in: query
          name: med_instance
          description: Meditation device routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        204:
          description: Lawful interception enabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /interfaces/logicals/{ifl_name}/disableLI:
    post:
      summary: Disables lawful interception for the specified logical interface.
      operationId: disableLawfulInterceptionIFL
      description: |
        Disables lawful interception (LI) for the specified logical interface 
        with the specified mediation device, direction and LI identifier.
      tags:
        - Interfaces
      parameters:
        - in: path
          name: ifl_name
          description: The logical-interface name.
          required: true
          schema:
            $ref: "#/components/schemas/IflName"
        - in: query
          name: id
          description: The LI request ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4194303
      responses:
        204:
          description: Lawful interception disabled.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /lldp/neighbors:
    get:
      summary: Lists all LLDP neighbors
      operationId: getLLDPNeighbors
      description: Lists all LLDP neighbors on all interfaces
      tags:
        - LLDP
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LldpGlobalNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /lldp/neighbors/{ifp_name}:
    get:
      summary: Shows an LLDP neighbor
      operationId: getLLDPNeighbor
      description: Shows the LLDP neighbor for a given interface.
      tags:
        - LLDP
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LldpGlobalNeighbor"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /access/vlan-profiles:
    get:
      summary: Lists VLAN profiles
      operationId: getVLANProfiles
      description: Lists all VLAN profiles, optionally filtered by physical interface.
      tags:
        - Access
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface name.
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VLANProfile"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Updates VLAN profiles.
      operationId: storeVLANProfiles
      description: |
        Creates or replaces all VLAN profiles with the list of profiles in the request body,
        optionally filtered by the physical interface.
      tags:
        - Access
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface name.
          schema:
            type: string
      requestBody:
        description: List of VLAN profile objects.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VLANProfile'
      responses:
        204:
          description: The VLAN profile have been updated.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /access/vlan-profiles/add:
    post:
      summary: Adds a VLAN profile.
      operationId: addVLANProfile
      description: |
        Injects a single VLAN profile object into the global VLAN profile BDS table.

        A VLAN profile has a composite key of up to 5 parameters, which are modelled as query parameters because of the many valid combinations.
        The keys specified in the VLAN profile must match the query parameters. Otherwise the request gets rejected.
        
        This endpoint creates a VLAN profile object from the specified keys when no VLAN profile is specified. 
        This is a convenience function to simplify creation of VLAN profiles that consists of key attributes only.
      tags:
        - Access
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface.
          required: true
          schema:
            type: string
        - in: query
          name: outer_vlan_min
          description: The outer VLAN range minimum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: outer_vlan_max
          description: The outer VLAN range maximum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan_min
          description: The inner VLAN range minimum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan_max
          description: The inner VLAN range maximum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VLANProfile"
      responses:
        204:
          description: The VLAN profile has been added.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /access/vlan-profiles/delete:
    post:
      summary: Deletes a VLAN profile.
      operationId: deleteVLANProfile
      description: |
        Deletes a single VLAN profile object from the global VLAN profile BDS table.
        Performs an exact match on the query parameters.
      tags:
        - Access
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface.
          required: true
          schema:
            type: string
        - in: query
          name: outer_vlan_min
          description: The outer VLAN range minimum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: outer_vlan_max
          description: The outer VLAN range maximum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan_min
          description: The inner VLAN range minimum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
        - in: query
          name: inner_vlan_max
          description: The inner VLAN range maximum value.
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        204:
          description: The VLAN profile has been removed.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /access/vlan-profiles/batch:
    post:
      summary: Runs a VLAN profile configuration batch job.
      operationId: processVLANProfilesBatch
      description: |
        Stores and removes all VLAN profiles as specified in the batch.
      tags:
        - Access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VLANProfileBatch"
      responses:
        204:
          description: Batch successfully executed.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /access/vlan-profiles/flush:
    post:
      summary: Deletes VLAN profiles.
      operationId: flushVLANProfiles
      description: |
        Deletes all VLAN profile objects, optionally filtered by the physical interface.
      tags:
        - Access
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface.
          schema:
            type: string
      responses:
        204:
          description: The VLAN profile has been removed.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /l2bsa:
    get:
      summary: Lists all L2BSA services.
      operationId: getL2BSAServices
      description: Lists all L2BSA services provisioned on this switch.
      tags:
        - L2BSA
      responses:
        200:
          description: List of provisioned L2BSA services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2bsaServiceConfig"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Updates all L2BSA services.
      operationId: storeL2BSAServices
      description: |
        Updates all L2BSA services provisioned on this switch by 
        - adding new L2BSA services, 
        - updating existing L2BSA services and 
        - removing L2BSA services not included in the request entity.
        
        An empty request removes all L2BSA services from this switch.
      tags:
        - L2BSA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/L2bsaServiceConfig"
      responses:
        200:
          description: List of provisioned L2BSA services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2bsaServiceConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /l2bsa/batch:
    post:
      summary: Runs L2BSA service configuration batch job.
      operationId: processL2BSAServiceBatch
      description: |
        Stores or removes all L2BSA service configurations as specified in the batch instructions.
      tags:
        - L2BSA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/L2bsaServiceConfigBatch"
      responses:
        204:
          description: Batch successfully executed.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /l2bsa/{ifp_name}:
    get:
      summary: Lists all L2BSA services on a physical interface.
      operationId: getL2BSAService
      description: Lists all L2BSA services provisioned on the specified physical interface.
      tags:
        - L2BSA
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            type: "string"
      responses:
        200:
          description: List of provisioned L2BSA services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2bsaServiceConfig"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Updates all L2BSA services on the given physical interface
      operationId: storeL2BSAService
      description: |
        Updates all L2BSA services provisioned on the given physical interface of this switch by 
        - adding new L2BSA services, 
        - updating existing L2BSA services and 
        - removing L2BSA services not included in the request entity.
        
        An empty request removes all L2BSA services from the given physical interface.
      tags:
        - L2BSA
      parameters:
        - in: path
          name: ifp_name
          required: true
          description: The physical interface name.
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/L2bsaServiceConfig"
      responses:
        200:
          description: List of provisioned L2BSA services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2bsaServiceConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /l2bsa/{ifp_name}/{anp}:
    get:
      summary: Shows a L2BSA service.
      operationId: getL2BSAServicesOfANP
      description: Shows the L2BSA service on the given interface with the given ANP VLAN.
      tags:
        - L2BSA
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        200:
          description: The provisioned L2BSA service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/L2bsaServiceConfig"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Stores a L2BSA service configuration.
      operationId: storeL2BSAServicesForANP
      description: Stores the L2BSA service configuration.
      tags:
        - L2BSA
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/L2bsaServiceConfig"
      responses:
        204:
          description: The L2BSA service got stored.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Removes a L2BSA service.
      operationId: removeL2BSAServicesForANP
      description: Removes the L2BSA service configuration and terminates the associated subscriber session.
      tags:
        - L2BSA
      parameters:
        - in: path
          name: ifp_name
          description: The physical interface name.
          required: true
          schema:
            type: "string"
        - in: path
          name: anp
          description: The ANP VLAN ID.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: |
            The L2BSA service has been removed. 
            
            This is status code is also used if the service does not exist (anymore).
            Subsequent DELETE requests to not lead to a 404 Not Found reply.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x:
    get:
      summary: Lists all L2X endpoints.
      operationId: getA10NSPL2XEndpoints
      description: List all L2X endpoints configured on this A10-NSP switch.
      tags:
        - A10NSP
      responses:
        200:
          description: The configured L2X endpoints.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/A10nspConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Updates all L2X endpoint configurations.
      operationId: storeA10NSPL2XEndpoints
      description: |
        Updates all L2X endpoint configurations by 
        - adding new L2X endpoints,
        - updating existing L2X endpoints and
        - removing all L2X endpoints not listed in the request entity anymore.

        An empty array removes all L2X endpoints.
      tags:
        - A10NSP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/A10nspConfig"
      responses:
        204:
          description: L2X endpoints successfully updated.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x/batch:
    post:
      summary: Runs a A10NSP L2X configuration batch job.
      operationId: processA10NSPL2XBatch
      description: |
        Adds and removes A10NSP L2X endpoints as specified in the batch job.
      tags:
        - A10NSP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/A10nspConfigBatch"
      responses:
        204:
          description: L2X endpoints successfully updated.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x/{lag_interface_name}:
    get:
      summary: Lists all L2X endpoints.
      operationId: getA10NSPL2XEndpointsOfLAGInterface
      description: List all L2X endpoints configured on the specified LAG interface.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The configured L2X endpoints.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/A10nspConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Updates all L2X endpoint configurations for a LAG interface.
      operationId: storeA10NSPL2XEndpointsForLAGInterface
      description: |
        Updates all L2X endpoint configurations for a LAG interface by 
        - adding new L2X endpoints,
        - updating existing L2X endpoints and
        - removing all L2X endpoints not listed in the request entity anymore.

        An empty array removes all L2X endpoints from the specified LAG interface.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/A10nspConfig"
      responses:
        204:
          description: L2X endpoints successfully updated.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x/{lag_interface_name}/{s_vlan}:
    get:
      summary: Shows an L2X endpoint.
      operationId: getA10NSPL2XEndpoint
      description: Shows the configuration of the L2X endpoint configured on the specified LAG interface with the specified S-VLAN.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan
          description: The S-VLAN ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The configured L2X endpoint.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/A10nspConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Stores an L2X endpoint.
      operationId: storeA10NSPL2XEndpoint
      description: |
        Stores an L2X endpoints by either 
        creating a new L2X endpoint on the specified LAG interface with the specified S-VLAN or 
        updating an existing L2X endpoint configuration.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan
          description: The S-VLAN ID.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/A10nspConfig"
      responses:
        204:
          description: L2X endpoint stored.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Removes the L2X endpoint.
      operationId: removeA10NSPL2XEndpoint
      description: Removes the L2X endpoints with the specified S-VLAN from the specified LAG interface.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan
          description: The S-VLAN ID.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: L2X endpoint removed.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x/{lag_interface_name}/{s_vlan_low}-{s_vlan_high}:
    get:
      summary: Shows an L2X endpoint.
      operationId: getA10NSPL2XRangeEndpoint
      description: |
        Shows the configuration of the L2X endpoint configured on the specified LAG interface with the specified S-VLAN range.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan_low
          description: The S-VLAN range low boundary.
          required: true
          schema:
            type: integer
        - in: path
          name: s_vlan_high
          description: The S-VLAN range high boundary.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The configured L2X endpoint.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/A10nspConfig"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      summary: Stores an L2X endpoint.
      operationId: storeA10NSPL2XRangeEndpoint
      description: |
        Stores an L2X endpoints by either 
        creating a new L2X endpoint on the specified LAG interface with the specified S-VLAN range or 
        updating an existing L2X endpoint configuration.

        S-VLAN ranges cannot be combined with ANP-VLANs.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan_low
          description: The S-VLAN range low boundary.
          required: true
          schema:
            type: integer
        - in: path
          name: s_vlan_high
          description: The S-VLAN range high boundary.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/A10nspConfig"
      responses:
        204:
          description: L2X endpoint stored.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
    delete:
      summary: Removes the L2X endpoint.
      operationId: removeA10NSPL2XRangeEndpoint
      description: Removes the L2X endpoint with the specified S-VLAN range from the specified LAG interface.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan_low
          description: The S-VLAN range low boundary.
          required: true
          schema:
            type: integer
        - in: path
          name: s_vlan_high
          description: The S-VLAN range high boundary.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: L2X endpoint removed.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /a10nsp/l2x/{lag_interface_name}/{s_vlan_low}-{s_vlan_high}/resize:
    post:
      summary: Resizes a configured S-VLAN range.
      operationId: resizeA10NSPL2XRangeEndpoint
      description: |
        Changes a configured S-VLAN range by removing the existing S-VLAN range endpoint and creating a new S-VLAN range endpoint.
        This method is a convenience method to conduct the necessary DELETE and PUT operations to change the S-VLAN range in one go.
        The operation performs no change if the current range and the requested new range are the same.
      tags:
        - A10NSP
      parameters:
        - in: path
          name: lag_interface_name
          description: The link aggregation (LAG) interface name.
          required: true
          schema:
            type: string
        - in: path
          name: s_vlan_low
          description: The S-VLAN range low boundary.
          required: true
          schema:
            type: integer
        - in: path
          name: s_vlan_high
          description: The S-VLAN range high boundary.
          required: true
          schema:
            type: integer
        - in: query
          name: s_vlan_low
          description: The new S-VLAN range low boundary.
          required: false
          schema:
            type: integer
        - in: query
          name: s_vlan_high
          description: The new S-VLAN range high boundary.
          required: false
          schema:
            type: integer
        - in: query
          name: s_vlan_range
          description: The new S-VLAN range.
          required: false
          schema:
            type: integer
        - in: query
          name: anp_vlan
          description: The ANP-VLAN if the range size changes to 1 (single S-VLAN).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 4094
      responses:
        201:
          description: The new A10NSP endpoint has been stored.
        204:
          description: No change needed because the range did not change.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /pim/neighbors:
    get:
      summary: Lists all PIM neighbors.
      operationId: getPIMNeighbors
      description: Lists all PIM neighbors grouped by routing instances.
      tags:
        - PIM
      responses:
        200:
          description: List of PIM neighbors grouped by instances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PIMNeighbors"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /pim/interfaces:
    get:
      summary: Lists all PIM interfaces.
      operationId: getPIMInterfaces
      description: Lists all logical interfaces with PIM enabled grouped by routing instances.
      tags:
        - PIM
      responses:
        200:
          description: PIM interfaces grouped by instances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PIMInterfaces"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /pim/instances:
    get:
      summary: Lists all PIM instances.
      operationId: getPIMInstances
      description: Lists all routing instances with PIM enabled.
      tags:
        - PIM
      responses:
        200:
          description: List of PIM instances.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PIMInstanceRef"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /pim/instances/{instance_name}:
    get:
      summary: Returns a PIM instance.
      operationId: getPIMInstance
      description: Returns the PIM settings of the routing instance with the given instance name.
      tags:
        - PIM
      parameters:
        - in: path
          name: instance_name
          description: The PIM instance name
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of PIM instances.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PIMInstance"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /pim/instances/{instance_name}/interfaces/{ifl_name}:
    get:
      summary: Returns the PIM interface.
      operationId: getPIMInterface
      description: |
        Returns the PIM settings of the logical interface with the given name 
        configured in the given instance.
      tags:
        - PIM
      parameters:
        - in: path
          name: instance_name
          description: The PIM instance name
          required: true
          schema:
            type: string
        - in: path
          name: ifl_name
          description: The logical interface name.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The PIM interface.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PIMInterface"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /pim/instances/{instance_name}/neighbors/{neighbor_ip}:
    get:
      summary: Returns the PIM neighbor.
      operationId: getPIMNeighbor
      description: |
        Returns the PIM neighbor information for the neighbor with the given IP address 
        configured in the given instance.
      tags:
        - PIM
      parameters:
        - in: path
          name: instance_name
          description: The PIM instance name
          required: true
          schema:
            type: string
        - in: path
          name: neighbor_ip
          description: The neighbor IPv4 or IPv6 address.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The PIM neighbor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PIMNeighbor"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /system/hardware:
    get:
      summary: Shows system hardware inventory
      operationId: getSystemHardware
      description: Shows chassis, modules, and optics.
      tags:
        - System
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemHardware"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /routes:
    get:
      summary: Returns route summary statistics
      operationId: getRoutesSummary
      description:
        Returns the number of routes for each instance grouped by originating protocol from the RIB.
      tags:
        - Routes
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: object
                description: Contains the route summary statistics for each instance.
                additionalProperties:
                  $ref: "#/components/schemas/RoutesSummary"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /routes/{instance_name}:
    get:
      summary: Returns route summary statistics
      operationId: getInstanceRoutesSummary
      description:
        Returns the number of routes for each instance grouped by originating protocol from the RIB.
      tags:
        - Routes
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                type: object
                description: Contains the route summary statistics for the given instance.
                additionalProperties:
                  $ref: "#/components/schemas/RoutesSummary"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /routes/{instance_name}/{afi}/{safi}:
    get:
      summary: List route information for a prefix
      operationId: getInstanceUnicastRoutes
      description: |
        List route table entries in an instance for a AFI/SAFI, and prefix or label.
        - prefix4 query parameter mandatory for AFI IPv4
        - prefix6 query parameter mandatory for AFI IPv6
        - label query parameter mandatory for AFI MPLS or L2VPN
        - l2_prefix the L2 prefix for AFI L2VPN

        Bear in mind that the SAFI needs to be unicast for querying MPLS label route entries.
      tags:
        - Routes
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            type: string
        - in: path
          name: afi
          description: The address family.
          required: true
          schema:
            type: string
        - in: path
          name: safi
          description: The sub-address family.
          required: true
          schema:
            type: string
        - in: query
          name: prefix4
          description: IPv4 prefix (address/mask)
          schema:
            type: string
        - in: query
          name: prefix6
          description: IPv6 prefix (address/mask)
          schema:
            type: string
        - in: query
          name: label
          description: MPLS label value
          schema:
            type: string
        - in: query
          name: l2_prefix
          description: L2 prefix value
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceUnicastRoutes"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /mroutes/{instance_name}/{afi}/{safi}:
    get:
      summary: List multicast route information for a group
      operationId: getInstanceMulticastRoutes
      description: |
        List multicast route table entries in an instance for a AFI/SAFI and group.
        - multicast_group4 query parameter mandatory for AFI IPv4
        - multicast_group6 query parameter mandatory for AFI IPv6
        - multicast_source4 query parameter optional for AFI IPv4
        - multicast_source6 query parameter optional for AFI IPv6
      tags:
        - Routes
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            type: string
        - in: path
          name: afi
          description: The address family.
          required: true
          schema:
            type: string
        - in: path
          name: safi
          description: The sub-address family.
          required: true
          schema:
            type: string
        - in: query
          name: multicast_group4
          description: IPv4 group (address/mask)
          schema:
            type: string
        - in: query
          name: multicast_group6
          description: IPv6 group (address/mask)
          schema:
            type: string
        - in: query
          name: multicast_source4
          description: IPv4 source prefix (address/mask)
          schema:
            type: string
        - in: query
          name: multicast_source6
          description: IPv6 source prefix (address/mask)
          schema:
            type: string
      responses:
        200:
          description: The request has been successful and a response has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceMulticastRoutes"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /ldp/sessions:
    get:
      summary: Lists LDP sessions
      operationId: getLDPSessions
      description: Lists LDP sessions grouped by routing instance.
      tags:
        - LDP
      responses:
        200:
          description: List of LDP sessions and their respective state grouped by instance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDPInstanceSessions"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /ldp/instances:
    get:
      summary: Lists all instances running LDP.
      operationId: getLDPInstances
      description: Returns all routing instances running LDP with some LDP statistics.
      tags:
        - LDP
      responses:
        200:
          description: List of LDP sessions and their respective state grouped by instance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDPInstanceRef"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /ldp/instances/{instance_name}:
    get:
      summary: Returns the LDP sessions and statistics.
      operationId: getLDPInstance
      description: Returns the LDP sessions and statistics for the routing instance with the given name.
      tags:
        - LDP
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        200:
          description: List of LDP sessions and their respective state grouped by instance.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDPInstanceSessions"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /ldp/instances/{instance_name}/sessions/clear:
    post:
      summary: Clears all LDP sessions.
      operationId: clearLDPSessions
      description: Clears all LDP sessions associated with this instance.
      tags:
        - LDP
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        204:
          description: All LDP sessions have been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"

  /ldp/instances/{instance_name}/sessions/{peer_ip}:
    get:
      summary: Returns the LDP sessions details
      operationId: getLDPSession
      description: Returns the LDP sessions and statistics for the LDP session with the given peer.
      tags:
        - LDP
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: peer_ip
          description: The the peer IPv4 or IPv4 address.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The LDP session details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LDPInstanceSession"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /ldp/instances/{instance_name}/sessions/{peer_ip}/clear:
    post:
      summary: Clears a LDP session
      operationId: clearLDPSession
      description: Clears the LDP sessions and statistics for the LDP session with the given peer.
      tags:
        - LDP
      parameters:
        - in: path
          name: instance_name
          description: The routing instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: peer_ip
          description: The the peer IPv4 or IPv4 address.
          required: true
          schema:
            type: string
      responses:
        204:
          description: The LDP session has been cleared.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /neighbors:
    get:
      summary: Lists all known ARP/NDP neighbors
      operationId: getNeighbors
      description: Lists all known ARP/NDP neighbors of all instances.
      tags:
        - Neighbors
      parameters:
        - in: query
          name: afi
          description: The address family
          required: false
          schema:
            type: string
            enum:
              - ipv4
              - ipv6
      responses:
        200:
          description: The ARP/NDP neighbors grouped by instance
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ARPNDPInstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /neighbors/instances/{instance_name}:
    get:
      summary: Lists all known ARP/NDP neighbors
      operationId: getInstanceNeighbors
      description: Lists all known ARP/NDP neighbors of the requested instance.
      tags:
        - Neighbors
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: afi
          description: The address family
          required: false
          schema:
            type: string
            enum:
              - ipv4
              - ipv6
      responses:
        200:
          description: The neighbors of the instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ARPNDPInstanceNeighbors"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances:
    get:
      summary: Lists all instances with configured RPKI-RTR.
      operationId: getRPKIRTRInstances
      description: Lists all instances with configured RPKI-RTR including the configured sessions.
      tags:
        - RPKI-RTR
      responses:
        200:
          description: All instances with configured RPKI-RTR
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RPKIRTRInstance"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}:
    get:
      summary: Returns the instance with configured RPKI-RTR.
      operationId: getRPKIRTRInstance
      description: Returns the instance with configured RPKI-RTR including all configured sessions.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        200:
          description: All instances with configured RPKI-RTR
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RPKIRTRInstance"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/clear:
    post:
      summary: Clears all RPKI-RTR sessions on the given instance.
      operationId: clearRPKIRTRInstance
      description: |
        Clears all sessions configured on the given sessions. 
        The soft flag allows doing a soft reset that merely sends a cache refresh request.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: soft
          description: Whether to run a soft reset.
          schema:
            type: boolean
            default: false
      responses:
        202:
          description: Reset request accepted
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/sessions:
    get:
      summary: Returns a RPKI-RTR session.
      operationId: getRPKIRTRSessions
      description: |
        Returns the sessions with the given RPKI cache IP.
        The source_ip parameter selects the specific session, if multiple session with the cache exist.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: cache_ip
          description: The RPKI cache IP.
          required: true
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        - in: query
          name: source_ip
          description: The session source IP address.
          required: false
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
      responses:
        200:
          description: The RPKI-RTR session.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RPKIRTRSession"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/sessions/{cache_ip}:
    get:
      summary: Returns a RPKI-RTR session.
      operationId: getRPKIRTRSession
      description: |
        Returns the sessions with the given RPKI cache IP.
        The source_ip parameter selects the specific session, if multiple session with the cache exist.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: cache_ip
          description: The RPKI cache IP.
          required: true
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        - in: query
          name: source_ip
          description: The session source IP address. This parameter needs to be specified if multiple sessions to the same cache IP from different source IPs exist.
          required: false
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
      responses:
        200:
          description: The RPKI-RTR session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RPKIRTRSession"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/sessions/{cache_ip}/clear:
    post:
      summary: Clears a RPKI-RTR session.
      operationId: clearRPKIRTRSession
      description: |
        Clears all sessions with the given RPKI cache IP.
        The source_ip parameter allows selecting a specific session if multiple session with the cache exist.
        The soft flag allows doing a soft reset that merely sends a cache refresh request.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: cache_ip
          description: The RPKI cache IP.
          required: true
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        - in: query
          name: source_ip
          description: The session source IP address.
          required: false
          schema:
            oneOf:
              - type: string
                format: ipv4
              - type: string
                format: ipv6
        - in: query
          name: soft
          description: Whether to run a soft reset.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        202:
          description: Reset request accepted
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/database/{prefix}:
    get:
      summary: Returns the database record for the given prefix.
      operationId: getRPKIRTRRecord
      description: |
        Searches the covering prefix for the given prefix and returns the AS number associated with this prefix.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: prefix
          description: The IP prefix.
          required: true
          schema:
            oneOf:
              - type: string
                format: ipv4_prefix
              - type: string
                format: ipv6_prefix
      responses:
        200:
          description: The RPKI database record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RPKIRTRRecord"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /rpki-rtr/instances/{instance_name}/database/clear:
    post:
      summary: Clears the RPKI-RTR database for the given session.
      operationId: clearRPKIRTRDatabase
      description: |
        Clears the RPKI database and all session in the given instance.
      tags:
        - RPKI-RTR
      parameters:
        - in: path
          name: instance_name
          description: The instance name
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
      responses:
        202:
          description: Reset request accepted
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        422:
          $ref: "#/components/responses/422"
        500:
          $ref: "#/components/responses/500"
  /cgnat/instances/{instance}/address-translations:
    get:
      summary: Looks up all address translations for a given user.
      operationId: getCgnatAddressTranslations
      description: |
        Searches all address-translations for the given user.
        The user is identified by its logical interface name.
        Returns an empty list of address translations if the user does not exist or no address translations for the user exist.
      tags:
        - cgNAT
      parameters:
        - in: path
          name: instance
          description: The instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: user
          description: The user identifier, typically the logical user interface
          required: true
          schema:
            type: string
      responses:
        200:
          description: The address translations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAddressTranslations"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /flowspec/instances/rules:
    get:
      summary: Lists all instances with flowspec rules.
      description: Lists all received flowspec rules including their implementation status grouped by instance and address family.
      tags:
        - flowspec
      parameters:
        - in: query
          name: destination_prefix
          description: The destination prefix.
          required: false
          schema:
            type: string
        - in: query
          name: source_prefix
          description: The source prefix.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The flowspec rules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowspecInstanceRules"
  /flowspec/instances/{instance}/rules:
    get:
      summary: Lists all flowspec rules for the given instance.
      description: Lists all received flowspec rules including their implementation status grouped by address family.
      tags:
        - flowspec
      parameters:
        - in: path
          name: instance
          description: The instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: destination_prefix
          description: The destination prefix.
          required: false
          schema:
            type: string
        - in: query
          name: source_prefix
          description: The source prefix.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The flowspec rules.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowspecInstanceRules"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /flowspec/instances/{instance}/rules/{afi}:
    get:
      summary: Lists all flowspec rules for the given instance and address family.
      description: Lists all received flowspec rules including their implementation status.
      tags:
        - flowspec
      parameters:
        - in: path
          name: instance
          description: The instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: path
          name: afi
          description: The address family.
          required: true
          schema:
            type: string
            enum:
              - ipv4
              - ipv6
        - in: query
          name: destination_prefix
          description: The destination prefix.
          required: false
          schema:
            type: string
        - in: query
          name: source_prefix
          description: The source prefix.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The flowspec rules.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowspecRule"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /l2vpn/cross-connects:
    get:
      summary: Lists all establish cross-connects
      tags:
        - L2VPN
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: ifl_name
          description: The logical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        200:
          description: The L2VPN cross connects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2VPNCrossConnect"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /l2vpn/instances/pseudowires:
    get:
      summary: Lists L2VPN pseudowires including their respective states.
      description: Lists L2VPN pseudowires grouped by instance and SAFI.
      tags:
        - L2VPN
      parameters:
        - in: query
          name: ifp_name
          description: The physical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: ifl_name
          description: The logical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        200:
          description: The L2VPN pseudowires.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/L2VPNInstancePseudowires"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /l2vpn/instances/{instance}/pseudowires:
    get:
      summary: Lists L2VPN pseudowires including their respective states.
      description: Lists L2VPN pseudowires grouped by instance and SAFI.
      tags:
        - L2VPN
      parameters:
        - in: path
          name: instance
          description: The instance name.
          required: true
          schema:
            $ref: "#/components/schemas/InstanceName"
        - in: query
          name: ifp_name
          description: The physical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IfpName"
        - in: query
          name: ifl_name
          description: The logical interface on which the pseudowire is defined.
          required: false
          schema:
            $ref: "#/components/schemas/IflName"
      responses:
        200:
          description: The L2VPN pseudowires.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/L2VPNInstancePseudowires"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"


components:
  responses:
    400:
      description: |
        **Bad request.**
        
        The request is syntactically invalid and cannot be processed.
        Check for malformed JSON, wrong data types or incorrectly formatted string values.
    401:
      description: |
        **Unauthorized request.**
        
        The requests either lacks an `Authorization` header or the 
        `Authorization` header contains invalid or expired credentials.
    403:
      description: |
        **Insufficient access privileges.**
        
        The requests contains valid authorization information, but the authenticated
        user is not allowed to access the requested resource or execute the requested operation.
    404:
      description: |
        **Not found.**
        
        The requested resource does not exist.
    409:
      description: |
        **Conflict.**
        
        The requested operation conflicts with the current resource state 
        and can therefore not be executed.
    422:
      description: |
        **Unprocessable Entity.**
        
        The request entity was syntactically correct but cannot be processed due 
        to missing attributes or invalid attribute values.
    500:
      description: |
        **Internal error.**
        
        The invocation failed due to an internal error.
        Please try again later or check the switch logs.
  schemas:
    IflName:
      type: string
      description: Logical interface name.
    IfpName:
      type: string
      description: Physical interface name.
    IfName:
      type: string
      description: A physical or logical interface name.
    InstanceName:
      type: string
      description: Routing instance name.
    SubscriberId:
      type: integer
      description: Subscriber ID.
    BGPState:
      type: string
      description: BGP FSM state.
      enum:
        - CONNECT
        - IDLE
        - OPEN_CONFIRM
        - OPEN_SENT
        - ACTIVE
        - ESTABLISHED
    PingStatus:
      type: object
      description: |
        Describes the results of pinging a given destination IP.
      properties:
        ping:
          $ref: "#/components/schemas/PingArguments"
        statistics:
          $ref: "#/components/schemas/PingStatistics"
        command:
          type: string
          description: The command to run the ping from the CLI
        output:
          type: array
          description: The ping command output. One item per line.
          items:
            type: string
    PingArguments:
      type: object
      description: The arguments of the executed ping command.
      properties:
        destination_ip:
          type: string
          description: The pinged destination IP address (ICMP ping).
        destincation_ip_fec:
          type: string
          description: The pinged destination IP FEC (LSPING).
        fec_type:
          type: string
          description: The FEC type (LSPING).
        source_ip:
          type: string
          description: The source IP address.
        source_ifl:
          type: string
          description: The egress interface name (ICMP ping).
        instance_name:
          type: string
          description: The routing instance name.
        interval:
          type: number
          format: float
          description: The interval between two pings.
        count:
          type: integer
          description: The number of pings sent.
        size:
          type: integer
          description: The packet size in bytes.
        ttl:
          type: integer
          description: The IP TTL value (ICMP ping).
        tos:
          type: integer
          description: The IP ToS value (ICMP ping).
    PingStatistics:
      type: object
      description: Ping counters.
      properties:
        sent:
          type: integer
          description: Number of pings sent.
        received:
          type: integer
          description: Number of pings received.
        lost:
          type: integer
          description: Number of pings lost.
        rtt:
          description: Round-trip time statistics.
          type: object
          properties:
            min:
              type: number
              description: Minumum round-trip time.
            avg:
              type: number
              description: Average round-trip time.
            max:
              type: number
              description: Maximum round-trip time.
            stddev:
              type: number
              description: |
                Round-trip time standard deviation. 
                This property has been marked deprecated. 
                Please use the mdev property instead.
              deprecated: true
            mdev:
              type: number
              description: Round-trip time standard deviation.
            total:
              type: number
              description: Total round-trip times to fire all pings.
    Traceroute:
      type: object
      description: The traceoute output
      properties:
        traceroute:
          $ref: "#/components/schemas/TracerouteArguments"
        hops:
          description: Array of hops to reach the destination.
          type: array
          items:
            $ref: "#/components/schemas/TracerouteHop"
        command:
          description: The command to run traceroute in the RBFS CLI.
          type: string
        output:
          type: array
          description: The traceroute command output. One item per line.
          items:
            type: string
    TracerouteArguments:
      description: The traceroute parameters
      type: object
      properties:
        destination_ip:
          type: string
          description: The destination IPv4 or IPv6 address.
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        source_ip:
          type: string
          description: The source IPv4 or IPv6 address.
        source_ifl:
          type: string
          description: The logical source interface.
        max_hops:
          type: string
          description: The maximum hops to reach the destination.
          minimum: 1
          maximum: 255
          default: 30
        interval:
          type: number
          description: The interval between to packages in seconds.
          minimum: 0.001
          maximum: 10.0
          default: 1.0
        size:
          type: number
          description: The packet payload size in bytes.
          minimum: 8
          maximum: 32768
    TracerouteHop:
      type: object
      properties:
        seq:
          type: integer
          description: The hop sequence number.
        hop:
          type: string
          description: The hop IPv4 or IPv6 addresses.
        rtt_1:
          type: number
          description: Round-trip time (RTT) in seconds of the first packet sent by traceroute.
        rtt_2:
          type: number
          description: Round-trip time (RTT) in seconds of the second packet sent by traceroute.
        rtt_3:
          type: number
          description: Round-trip time (RTT) in seconds of the third packet sent by traceroute.
    BGPInstanceRef:
      type: object
      description: |
        A BGP instance reference contains the information to render a list of configured BGP instances
        and to navigate to BGP instance details.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        asn:
          description: The AS number.
          type: integer
          format: int64
        router_id:
          description: Unique router ID.
          type: string
    BGPInstance:
      type: object
      description: BGP instance details.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        asn:
          description: The AS number.
          type: integer
          format: int64
        router_id:
          description: Unique router ID
          type: string
        cluster_id:
          description:  The BGP cluster ID this router is member of.
          type: string
        host_name:
          description: |
            The BGP host name.

            The host_name has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The BGP hostname.
          type: string
        domain_name:
          description: The BGP domain name.
          type: string
        bgp_version:
          description: BGP version.
          type: integer
        bgp_ip_tos:
          description: |
            The IP ToS (type of service) value set in all outgoing BGP packets.
          type: integer
        capabilities:
          type: object
          description: Set of configured BGP capabilities.
          properties:
            as4_capable:
              description: Accept 4-byte ASN numbers.
              type: boolean
            route_refresh_capable:
              description: Resend all prefixes if a peer asks for it.
              type: boolean
            graceful_restart_capable:
              description: Preserve forwarding state during BGP restart.
              type: boolean
            enforce_first_as:
              description: |
                Reject all routes from eBGP peers if the peer does not add its AS 
                as first AS in the AS path.
              type: boolean
        route_selection:
          type: object
          description: BGP best-route selection flags and default values.
          properties:
            med:
              description: |
                A constant BGP multi exit discriminator (MED) value
                shared as metric with all peers. 
                The metric is derived from the IGP if not specified.
              type: integer
            local_preference:
              description: |
                The AS-local preference value of this router.
                The router with the highest local preference 
                is preferred for routing traffic to an external AS
                if multiple paths exist.
              type: integer
            ibgp_preference:
              description: |
                The preference value for IBGP routes, 
                i.e. routes learned from BGP peers in the same AS.
              type: integer
            ebgp_preference:
              description: |
                The preference value for EBGP routes, 
                i.e. routes learned from BGP peers in an external AS.
              type: integer
            always_compare_med:
              description: |
                Ignore ASN when comparing MED values for route selection.
              type: boolean
            ignore_as_path_length:
              description: Ignore AS path length for route selection.
              type: boolean
            ignore_local_pref:
              description: Ignore local preference for route selection.
              type: boolean
            ignore_route_source:
              description: Ignore route source for route selection.
              type: boolean
            ignore_origin:
              description: Ignore origin for route selection.
              type: boolean
            ignore_med:
              description: |
                Ignore MED for route selection.
                bgp_always_compe_med has no effect if bgp_ignore_med is set to true.
              type: boolean
            ignore_route_type:
              description: Ignore route type for route selection.
              type: boolean
            ignore_up_time:
              description: Ignore up-time for route selection.
              type: boolean
            ignore_router_id:
              description: Ignore route ID for route selection.
              type: boolean
            ignore_cluster_length:
              description: Ignore cluster length for route selection.
              type: boolean
            ignore_peer_ip:
              description: Ignore peer IP for route selection.
              type: boolean
        timers:
          description: The BGP timers.
          type: object
          properties:
            gr_stale_time:
              description: Graceful restart (GR) stale timer value in seconds.
              type: integer
            gr_purge_time:
              description: Graceful restart (GR) purge timer value in seconds.
              type: integer
            gr_restart_time:
              description: Graceful restart (GR) restart timer value in seconds.
              type: integer
            hold_time:
              description: |
                BGP hold timer value in seconds.
                A BGP peer is considered down if the hold timer expires before
                receiving keep-alive messages from the BGP peer. 
                Every received hello message resets the hold timer.
              type: integer
            keep_alive_time:
              description: |
                BGP keep-alive timer value methods in seconds.
                The router sends a hello message to a peer when the keep-alive timer expires.
              type: integer
            connect_time:
              description: |
                BGP connect timer value in seconds.
                An active BGP peering tries to establish the peering every bgp_connect_time seconds.
              type: integer
        peerings:
          $ref: "#/components/schemas/BGPInstancePeeringsSummary"
    BGPInstancePeeringsSummary:
      type: object
      description: |
        A summary of the BGP instance peerings including the number of peerings per state
        and a reference to each peering. The reference allows obtaining the BPG peering details.
      properties:
        active_count:
          description: Number of peerings in active state.
          type: integer
        idle_count:
          description: Number of peerings in idle state.
          type: integer
        connect_count:
          description: Number of peerings in connect state.
          type: integer
        opensent_count:
          description: Number of peerings in opensent state.
          type: integer
        openconfirm_count:
          description: Number of peerings in openconfirm state.
          type: integer
        established_count:
          description: Number of peerings in established state.
          type: integer
        peerings:
          description: Array of BGP peering references.
          type: array
          items:
            $ref: "#/components/schemas/BGPPeeringRef"
    BGPInstancePeerings:
      description: BGP peerings grouped by instance.
      type: object
      properties:
        instance_name:
          description: BGP instance name
          type: string
        asn:
          description: The local AS number.
          type: integer
          format: int64
        router_id:
          description: The local router identifier.
          type: string
        host_name:
          description: |
            The BGP host name.

            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
        hostname:
          description: The BGP hostname.
          type: string
        domain_name:
          description: The BGP domain name.
          type: string
        cluster_id:
          description: The BGP cluster ID.
          type: string
        peerings:
          $ref: "#/components/schemas/BGPInstancePeeringsSummary"

    BGPPeeringRef:
      type: object
      description: |
        A reference to a BGP peering.
        This information can be used to obtain the more detailed BGPPeering object.
      properties:
        administrative_state:
          description: The administrative peering state.
          type: string
        bgp_state:
          $ref: "#/components/schemas/BGPState"
        last_state_transition:
          description: Last BGP state transition.
          type: string
          format: date-time
        last_reset_reason:
          description: Last session reset reason.
          type: string
        asn:
          description: The local AS number.
          type: integer
          format: int64
        bgp_session_flaps:
          description: Number of BGP session flaps.
          type: integer
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv6_address:
          description: The local IPv6 address.
          type: string
          format: ipv6
        ipv4_address:
          description: The local IPv4 address.
          type: string
          format: ipv4
        peering_type:
          description: The BGP peering type.
          type: string
          enum:
            - ebgp
            - ibgp
        peer:
          $ref: "#/components/schemas/BGPPeer"
    BGPPeer:
      description: Informations about the BGP peer.
      type: object
      properties:
        ipv6_address:
          description: The peer IPv6 address.
          type: string
          format: ipv6
        ipv4_address:
          description: The peer IPv4 address
          type: string
          format: ipv4
        router_id:
          description: The peer router ID.
          type: string
        asn:
          description: The peer AS number.
          type: integer
          format: int64
        host_name:
          description: |
            The peer host name.
            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The peer hostname.
          type: string
        domain_name:
          description: The peer domain name.
          type: string
        destination_port:
          description: The destination port to connect to this peer.
          type: integer
    BGPPeering:
      type: object
      description: BGP peering details.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        administrative_state:
          description: The administrative peering state.
          type: string
        bgp_state:
          $ref: "#/components/schemas/BGPState"
        last_state_transition:
          description: Last BGP state transition.
          type: string
          format: date-time
        last_reset_reason:
          description: The reason for the last BGP reset.
          type: string
        asn:
          description: The local AS number.
          type: integer
          format: int64
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv4_address:
          description: The local IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: The local IPv6 address.
          type: string
          format: ipv6
        source_port:
          description: The peering source port.
          type: integer
        router_id:
          description: The local router ID
          type: string
        host_name:
          description: |
            The local BGP host name.

            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The local BGP hostname.
          type: string
        domain_name:
          description: The local BGP domain name.
          type: string
        peering_type:
          description: The BGP peering type.
          type: string
          enum:
            - ebgp
            - ibgp
        peer_group_name:
          description: The BGP peer group name.
          type: string
        peer:
          $ref: "#/components/schemas/BGPPeer"
        capabilities:
          description: Configured, received and negotiated peering capabilities.
          type: object
          properties:
            as4_capable:
              description: Accept 4-byte AS number.
              type: boolean
            as4_capable_sent:
              description: Sent AS4 capability status.
              type: boolean
            as4_capable_received:
              description: Received AS4 capability status.
              type: boolean
            route_refresh_capable:
              description: Resend all prefixes if the peer asks for it.
              type: boolean
            route_refresh_capable_sent:
              description: Sent RR capability status.
              type: boolean
            route_refresh_capable_received:
              description: Received RR capability status.
              type: boolean
            graceful_restart_capable:
              description: Preserve forwarding state during BGP restart.
              type: boolean
            graceful_restart_capable_sent:
              description: Sent graceful restart capability status.
              type: boolean
            graceful_restart_capable_received:
              description: Received graceful restart capability status.
              type: boolean
            link_local_only:
              description: Use the link-local IPv6 addresses to establish this peering.
              type: boolean
            link_local_only_sent:
              description: Sent link local only capability status.
              type: boolean
            link_local_only_received:
              description: Received link local only capability status.
              type: boolean
            aigp_capable:
              description: Whether this peering supports accumulated IGP metrics.
              type: boolean
            aigp_capable_sent:
              description: Sent AIGP capability status.
              type: boolean
            aigp_capable_received:
              description: Received AIGP capability status.
              type: boolean
            afi_safis:
              description: Negotiated AFI/SAFI for which prefixes (NLRIs) are exchanged.
              type: array
              items:
                type: string
            afi_safis_sent:
              description: Sent AFI/SAFIs.
              type: array
              items:
                type: string
            afi_safis_received:
              description: Received AFI/SAFIs.
              type: array
              items:
                type: string
            extended_next_hops:
              description: Negotiated AFI-SAFIs with extended next hop configuration.
              type: array
              items:
                type: string
            extended_next_hops_sent:
              description: Sent extended next hop configuration.
              type: array
              items:
                type: string
            extended_next_hops_received:
              description: Received extended next hop configuration.
              type: array
              items:
                type: string
            additional_paths:
              description: AFI/SAFIs with additional paths enabled.
              type: array
              items:
                type: number
            additional_paths_send:
              description: Send additional paths configuration.
              type: array
              items:
                type: number
            additional_paths_received:
              description: Received additional paths configuration.
              type: array
              items:
                type: number
            6pe_enabled:
              description: |
                Flag indicating whether 6PE is enabled.
                PE6 allows establishing IPv6 reachability over an IPv4/MPLS core.
              type: boolean
            any_as:
              description: |
                Accept any remote AS number.
                If set to true, the remote AS is dynamically configured.
              type: boolean
        statistics:
          $ref: "#/components/schemas/BGPPeeringStatistics"
        timers:
          type: object
          description: |
            BGP timers and their current values.
          properties:
            keep_alive_timer:
              description: The keep alive timer value in seconds.
              type: integer
            keep_alive_time:
              description: The negotiated keep-alive time in seconds.
              type: integer
            keep_alive_time_received:
              description: The received keep alive time in seconds.
              type: integer
            keep_alive_time_sent:
              description: The configured keep alive time seconds.
              type: integer
            hold_timer:
              description: The hold timer value in seconds.
              type: integer
            hold_time:
              description: The negotiated hold time in seconds.
              type: integer
            hold_time_received:
              description: The received hold time in seconds.
              type: integer
            hold_time_sent:
              description: The sent hold time in seconds.
              type: integer
            connect_timer:
              type: integer
              description: The connect timer value in seconds.
            connect_time:
              description: The negotiated connect time in seconds.
              type: integer
            connect_time_sent:
              description: The sent connect time in seconds.
              type: integer
            connect_time_received:
              description: The received connect time in seconds.
              type: integer
    BGPPeeringStatistics:
      type: object
      description: |
        BGP peering summary statistics including
        received / sent prefixes per AFI/SAFI
      properties:
        bgp_session_flaps:
          description: Number of session flaps.
          type: integer
        bgp_session:
          $ref: "#/components/schemas/BGPStatistics"
        total:
          $ref: "#/components/schemas/BGPStatistics"
        routes:
          description: Number of received and sent prefixed grouped by AFI/SAFI.
          type: array
          items:
            $ref: "#/components/schemas/BGPAfiSafiStatistics"

    BGPStatistics:
      description: BGP session statistics.
      type: object
      properties:
        ingress:
          type: object
          properties:
            open_count:
              description: Number of received open messages.
              type: integer
            update_count:
              description: Number of received update messages.
              type: integer
            keep_alive_count:
              description: Number of received keep-alive messages.
              type: integer
            notify_count:
              description: Number of received notify messages.
              type: integer
            route_refresh_count:
              description: Number of received route-refresh messages.
              type: integer
        egress:
          type: object
          properties:
            open_count:
              description: Number of sent open messages.
              type: integer
            update_count:
              description: Number of sent update messages.
              type: integer
            keep_alive_count:
              description: Number of sent keep-alive messages.
              type: integer
            notify_count:
              description: Number of sent notify messages.
              type: integer
            route_refresh_count:
              description: Number of sent route-refresh messages.
              type: integer

    BGPAfiSafiStatistics:
      type: object
      properties:
        afi_safi:
          description: |
            The address family identifier and subaddress family identifier
            as single string using a hyphen as delimiter.
          type: string
        afi_name:
          description: The address family identifier.
          type: string
        safi_name:
          description: The subaddress family identifer.
          type: string
        prefixes_sent:
          description: The number of sent prefixes.
          type: integer
        prefixes_received:
          description: The number of received prefixes.
          type: integer

    Optic:
      deprecated: true
      allOf:
        - $ref: "#/components/schemas/OpticModule"
        - type: object
          properties:
            lanes:
              type: array
              items:
                $ref: "#/components/schemas/Lane"
    OpticModule:
      type: object
      description: Optical module details.
      deprecated: true
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        serial_number:
          description: The optics serial number.
          type: string
        part_number:
          description: The optics part number.
          type: string
        material_number:
          description: |
            The optics material number.
            The material number is a unique identifier for the materials management system.
          type: string
        vendor_name:
          description: The optics vendor name.
          type: string
        wavelength:
          description: The optics wave length.
          type: number
        optics_type:
          description: The optics type.
          type: string
        connector_type:
          description: The optics connector type.
          type: string
        power_class:
          description: The optics power class.
          type: string
        power_class_state:
          description: |
            The optics power state class.
            This attribute has been marked deprecated and will be removed in a future release.
            Please use the power_class_mode attribute instead.
          type: string
          deprecated: true
        power_class_mode:
          description: The optics power class mode.
          type: string
        date_manufactured:
          description: The optics manufacturing date.
          type: string
          format: date
        voltage_v:
          description: The optics voltage supply in volts.
          type: number
        temperature_c:
          description: The optics temperature in degree celsius.
          type: number
    Lane:
      type: object
      deprecated: true
      description: The optical lane information.
      properties:
        lane_id:
          description: The lane ID.
          type: integer
        temperature_celsius:
          description: |
            The optic temperature in degree celsius.
            
            **Deprecated**. Moved to the optic because the temperature value exists for the entire optic rather than per lane.
          type: number
          deprecated: true
        voltage:
          description: |
            The optic temperature in degree celsius.
            
            **Deprecated**. Moved to the optic because the voltage exists for the entire optic rather than per lane.
          type: number
          deprecated: true
        tx:
          description: TX-related state.
          type: object
          properties:
            los_alert:
              description: The status of the Loss-of-Signal (LoS) alert flag.
              type: boolean
            power_mw:
              description: The laser power in milliwatts.
              type: number
            power_dbm:
              description: The laser power in dbm.
              type: number
            power_high_alarm_threshold_mw:
              description: The power high alarm threshold in milliwatts.
              type: number
            power_high_alarm_threshold_dbm:
              description: The power high alarm threshold in dBm.
              type: number
            power_high_warn_threshold_mw:
              description: The power warning threshold in milliwatts.
              type: number
            power_high_warn_threshold_dbm:
              description: The power high warning threshold in dBm.
              type: number
            power_low_alarm_threshold_mw:
              description: The power low alarm threshold in milliwatts.
              type: number
            power_low_alarm_threshold_dbm:
              description: The power low alarm threshold in dBm.
              type: number
            power_low_warn_threshold_mw:
              description: The power low warning threshold in milliwatts.
              type: number
            power_low_warn_threshold_dbm:
              description: The power low warning threshold in dBm.
              type: number
            bias_current_ma:
              description: Laser bias current in mA.
              type: number
            bias_current_high_alarm_threshold_ma:
              description: Laser bias current high alarm threshold in mA.
              type: number
            bias_current_high_warning_threshold_ma:
              description: Laser bias current high warning threshold in mA.
              type: number
            bias_current_low_alarm_threshold_ma:
              description: Laser bias current low alarm threshold in mA.
              type: number
            bias_current_low_warning_threshold_ma:
              description: Laser bias current low warning threshold in mA.
              type: number
        rx:
          description: RX-related state.
          type: object
          properties:
            los_alert:
              description: The status of the Loss-of-Signal (LoS) alert flag.
              type: boolean
            power_mw:
              description: The laser power in milliwats.
              type: number
            power_dbm:
              description: The laser power in dbm.
              type: number
            power_high_alarm_threshold_mw:
              description: The power high alarm threshold in milliwatts.
              type: number
            power_high_alarm_threshold_dbm:
              description: The power high alarm threshold in dBm.
              type: number
            power_high_warn_threshold_mw:
              description: The power warning threshold in milliwatts.
              type: number
            power_high_warn_threshold_dbm:
              description: The power high warning threshold in dBm.
              type: number
            power_low_alarm_threshold_mw:
              description: The power low alarm threshold in milliwatts.
              type: number
            power_low_alarm_threshold_dbm:
              description: The power low alarm threshold in dBm.
              type: number
            power_low_warn_threshold_mw:
              description: The power low warning threshold in milliwatts.
              type: number
            power_low_warn_threshold_dbm:
              description: The power low warning threshold in dBm.
              type: number
    Transceiver:
      allOf:
        - $ref: "#/components/schemas/TransceiverModule"
        - type: object
          properties:
            lanes:
              type: array
              items:
                $ref: "#/components/schemas/TransceiverLane"
    TransceiverModuleInfo:
      type: object
      description: Transceiver module details.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        serial_number:
          description: The optics serial number.
          type: string
        part_number:
          description: The optics part number.
          type: string
        material_number:
          description: |
            The optics material number.
            The material number is a unique identifier for the materials management system.
          type: string
        vendor_name:
          description: The transceiver vendor name.
          type: string
        wavelength:
          description: The transceiver wavelength.
          type: number
        transceiver_type:
          description: The transceiver type.
          type: string
        transceiver_capabilities:
          description: The transceiver capabilities.
          type: string
        connector_type:
          description: The optics connector type.
          type: string
        power_class:
          description: The optics power class.
          type: integer
        power_class_rating:
          description: The power class rating.
          type: string
        power_mode:
          description: The power mode.
          type: string
          enum:
            - HIGH
            - LOW
        date_manufactured:
          description: The manufacturing date.
          type: string
          format: date
    TransceiverModule:
      type: object
      description: Transceiver module details.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        serial_number:
          description: The optics serial number.
          type: string
        part_number:
          description: The optics part number.
          type: string
        material_number:
          description: |
            The optics material number.
            The material number is a unique identifier for the materials management system.
          type: string
        vendor_name:
          description: The transceiver vendor name.
          type: string
        wavelength:
          description: The transceiver wavelength.
          type: number
        transceiver_type:
          description: The transceiver type.
          type: string
        transceiver_capabilities:
          description: The transceiver capabilities.
          type: string
        connector_type:
          description: The optics connector type.
          type: string
        power_class:
          description: The optics power class.
          type: string
        power_class_state:
          description: |
            The power state class.
            This attribute has been marked deprecated and will be removed in a future release.
            Please use the power_class_mode attribute instead.
          type: string
          deprecated: true
        power_class_mode:
          description: The power class mode.
          type: string
        date_manufactured:
          description: The manufacturing date.
          type: string
          format: date
        voltage_v:
          description: The voltage supply in volts.
          type: number
        voltage_high_alarm_threshold_v:
          description: The voltage high alarm threshold in volts
          type: number
        voltage_high_warning_threshold_v:
          description: The voltage high warning threshold in volts.
          type: number
        voltage_low_alarm_threshold_v:
          description: The voltage low alarm threshold in volts.
          type: number
        voltage_low_warning_threshold_v:
          description: The voltage low warning threshold in volts.
          type: number
        temperature_c:
          description: The transceiver temperature in degree celsius.
          type: number
        temperature_high_alarm_threshold_v:
          description: The temperature high alarm threshold in degree celsius.
          type: number
        temperature_high_warning_threshold_v:
          description: The temperature high warning threshold in degree celsius.
          type: number
        temperature_low_alarm_threshold_v:
          description: The temperature low alarm threshold in degree celsius.
          type: number
        temperature_low_warning_threshold_v:
          description: The temperatue low warning threshold in degree celsius.
          type: number
        tx:
          description: TX-related state.
          type: object
          properties:
            power_high_alarm_threshold_mw:
              description: The power high alarm threshold in milliwatts.
              type: number
            power_high_alarm_threshold_dbm:
              description: The power high alarm threshold in dBm.
              type: number
            power_high_warn_threshold_mw:
              description: The power warning threshold in milliwatts.
              type: number
            power_high_warn_threshold_dbm:
              description: The power high warning threshold in dBm.
              type: number
            power_low_alarm_threshold_mw:
              description: The power low alarm threshold in milliwatts.
              type: number
            power_low_alarm_threshold_dbm:
              description: The power low alarm threshold in dBm.
              type: number
            power_low_warn_threshold_mw:
              description: The power low warning threshold in milliwatts.
              type: number
            power_low_warn_threshold_dbm:
              description: The power low warning threshold in dBm.
              type: number
            bias_current_high_alarm_threshold_ma:
              description: Laser bias current high alarm threshold in mA.
              type: number
            bias_current_high_warning_threshold_ma:
              description: Laser bias current high warning threshold in mA.
              type: number
            bias_current_low_alarm_threshold_ma:
              description: Laser bias current low alarm threshold in mA.
              type: number
            bias_current_low_warning_threshold_ma:
              description: Laser bias current low warning threshold in mA.
              type: number
        rx:
          description: RX-related state.
          type: object
          properties:
            power_high_alarm_threshold_mw:
              description: The power high alarm threshold in milliwatts.
              type: number
            power_high_alarm_threshold_dbm:
              description: The power high alarm threshold in dBm.
              type: number
            power_high_warn_threshold_mw:
              description: The power warning threshold in milliwatts.
              type: number
            power_high_warn_threshold_dbm:
              description: The power high warning threshold in dBm.
              type: number
            power_low_alarm_threshold_mw:
              description: The power low alarm threshold in milliwatts.
              type: number
            power_low_alarm_threshold_dbm:
              description: The power low alarm threshold in dBm.
              type: number
            power_low_warn_threshold_mw:
              description: The power low warning threshold in milliwatts.
              type: number
            power_low_warn_threshold_dbm:
              description: The power low warning threshold in dBm.
              type: number
    TransceiverLane:
      type: object
      description: The transceiver lane information.
      properties:
        lane_id:
          description: The lane ID.
          type: integer
        tx:
          description: TX-related state.
          type: object
          properties:
            los_alert:
              description: The status of the Loss-of-Signal (LoS) alert flag.
              type: boolean
            power_mw:
              description: The laser power in milliwatts.
              type: number
            power_dbm:
              description: The laser power in dbm.
              type: number
            power_high_alarm:
              description: The power high alarm flag.
              type: boolean
            power_high_warning:
              description: The power high warning flag.
              type: boolean
            power_low_alarm:
              description: The power low alarm flag.
              type: boolean
            power_low_warning:
              description: The power low warning flag.
              type: boolean
            bias_current_ma:
              description: Laser bias current in mA.
              type: number
            bias_current_high_alarm:
              description: The bias current high alarm flag.
              type: boolean
            bias_current_high_warning:
              description: The bias current high warning flag.
              type: boolean
            bias_current_low_alarm:
              description: The bias current low alarm flag.
              type: boolean
            bias_current_low_warning:
              description: The bias current low warning flag.
              type: boolean
        rx:
          description: RX-related state.
          type: object
          properties:
            los_alert:
              description: The status of the Loss-of-Signal (LoS) alert flag.
              type: boolean
            power_mw:
              description: The laser power in milliwatts.
              type: number
            power_dbm:
              description: The laser power in dbm.
              type: number
            power_high_alarm:
              description: The power high alarm flag.
              type: boolean
            power_high_warning:
              description: The power high warning flag.
              type: boolean
            power_low_alarm:
              description: The power low alarm flag.
              type: boolean
            power_low_warning:
              description: The power low warning flag.
              type: boolean
    SubscriberAccessType:
      description: The subscriber access type.
      type: string
      enum:
        - PPPoE
        - L2TP
        - IPoE
        - L2BSA
        - Test
    SubscriberSessionRef:
      type: object
      description: A reference to an active subscriber session.
      properties:
        subscriber_id:
          $ref: "#/components/schemas/SubscriberId"
        subscriber_id_str:
          description: String subscriber_id representation for I-JSON compliance.
          type: string
        subscriber_user_name:
          type: string
        subscriber_state:
          description: The current subscriber FSM state.
          type: string
        access_type:
          $ref: "#/components/schemas/SubscriberAccessType"
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        inner_vlan:
          type: integer
          minimum: 1
          maximum: 4094
        outer_vlan:
          type: integer
          minimum: 1
          maximum: 4094
        client_mac:
          description: Client MAC address.
          type: string
        accounting_session_id:
          type: string
        agent_remote_id:
          type: string
        agent_circuit_id:
          type: string
    SubscriberSession:
      type: object
      description: An active subscriber session.
      properties:
        subscriber_state:
          description: The current subscriber FSM state.
          type: string
        last_state_transition:
          description: The timestamp of the last FSM state transition.
          type: string
          format: date-time
        subscriber_termination_reason:
          description: Reason why the subscriber session got terminated.
          type: string
        subscriber_id:
          $ref: "#/components/schemas/SubscriberId"
        subscriber_id_str:
          description: String subscriber_id representation for I-JSON compliance.
          type: string
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifp_mac:
          description: |
            The MAC address of the physical interface 
            the subscriber is connected to.
          type: string
        inner_vlan:
          description: |
            The inner VLAN (C-tag) associated with the subscriber.
          type: integer
          minimum: 1
          maximum: 4094
        outer_vlan:
          description: |
            The outer VLAN (S-tag) associated with the subscriber.
          type: integer
          minimum: 1
          maximum: 4094
        client_mac:
          description: The client MAC address.
          type: string
        subscriber_user_name:
          description: The subscriber's username.
          type: string
        agent_remote_id:
          description: The subscriber's Agent-Remote-ID.
          type: string
        agent_circuit_id:
          description: The subscriber's Agent-Circuit-ID.
          type: string
        ifl_name:
          description: The name of the subscriber's logical interface.
          type: string
        access_type:
          $ref: "#/components/schemas/SubscriberAccessType"
        ipv4:
          type: object
          description: Subscriber IPv4 settings
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            framed:
              type: object
              description: Framed IPv4 settings.
              properties:
                negotiated:
                  description: Wether the IPv4 address is active.
                  type: boolean
                  default: false
                address:
                  description: The assigned IPv4 address.
                  type: string
                  format: ipv4
                netmask:
                  description: The assigned IPv4 netmask.
                  type: string
                  format: ipv4
                pool_name:
                  description: The IPv4 address pool name.
                  type: string
            primary_dns:
              description: Primary DNS IPv4 address.
              type: string
              format: ipv4
            secondary_dns:
              description: Secondary DNS IPv4 address.
              type: string
              format: ipv4
        ipv6:
          type: object
          description: Subscriber IPv6 settings.
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            framed:
              type: object
              description: Framed IPv6 settings.
              properties:
                negotiated:
                  description: Wether the framed IPv6 prefix is active.
                  type: boolean
                  default: false
                prefix:
                  description: The assigned IPv6 prefix.
                  type: string
                  format: ipv6
                pool_name:
                  description: The IPv6 address pool name.
                  type: string
            delegated:
              type: object
              description: Delegated IPv6 settings.
              properties:
                negotiated:
                  description: Wether the delegated IPv6 prefix is active.
                  type: boolean
                  default: false
                prefix:
                  description: The assigned IPv6 prefix.
                  type: string
                  format: ipv6
                pool_name:
                  description: The IPv6 address pool name.
                  type: string
            primary_dns:
              description: Primary DNS IPv6 address
              type: string
              format: ipv6
            secondary_dns:
              description: Secondary DNS IPv6 address
              type: string
              format: ipv6
        l3_mtu:
          description: The MTU level assigned to the subscriber.
          type: integer
        aaa_profile_name:
          description: The AAA profile name.
          type: string
        access_profile_name:
          description: The access profile name.
          type: string
        service_profile_name:
          description: The service profile name.
          type: string
        accounting:
          $ref: "#/components/schemas/SubscriberAccountingInfo"
        qos:
          $ref: "#/components/schemas/SubscriberQosProfile"
        l2tp:
          description: L2TP specific settings.
          type: object
          properties:
            l2tp_role:
              description: |
                The L2TP role which is either LAC or LNS.
              type: string
              enum:
                - LAC
                - LNS
        pppoe:
          description: PPPoE specific settings.
          type: object
          properties:
            pppoe_session_id:
              description: The PPPoE session ID.
              type: integer
    SubscriberSessionStatistics:
      type: object
      description: Subscriber session counters.
      properties:
        total:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        ipoe:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        l2bsa:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        l2tp:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        pppoe:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        test:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        ifp_statistics:
          type: object
          description: Provides subscriber session counters per physical interface.
          additionalProperties:
            $ref: "#/components/schemas/IfpSubscriberSessionStatistics"
    IfpSubscriberSessionStatistics:
      type: object
      description: Holds the subscriber session counters of a single physical interface.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        total:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        ipoe:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        l2bsa:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        l2tp:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        pppoe:
          $ref: "#/components/schemas/SubscriberSessionCounters"
        test:
          $ref: "#/components/schemas/SubscriberSessionCounters"
    SubscriberSessionCounters:
      type: object
      description: Session counters by session state.
      properties:
        setup:
          description: Number of sessions that are about to being established.
          type: integer
          minimum: 0
        established:
          description: Number of established session.
          type: integer
          minimum: 0
        terminating:
          description: Number of sessions that are about to being terminated.
          type: integer
          minimum: 0

    SubscriberAccountingInfo:
      type: object
      properties:
        accounting_session_id:
          description: The accounting session ID.
          type: string
        accounting_start_time:
          description: Timestamp when the accounting session has started.
          type: string
          format: date-time
        accounting_stop_time:
          description: Timestamp when the accounting session has stopped.
          type: string
          format: date-time
        adjusted_counters:
          $ref: "#/components/schemas/SubscriberAdjustedAccounting"

    SubscriberAdjustedAccounting:
      description: Current adjusted accounting values.
      type: object
      properties:
        accounting_active:
          description: |
            A flag to indicate whether accounting is in progress (true) or 
            the final counter values have been read from the hardware (false).
          type: boolean
        session_ingress_packets:
          description: Number of packets received in this session.
          type: integer
        session_ingress_bytes:
          description: Number of bytes received in this session.
          type: integer
        session_egress_packets:
          description:  Number of packets sent in this session.
          type: integer
        session_egress_bytes:
          description: Number of bytes sent in this session.
          type: integer
        ifl_ingress_packets:
          description: Number of packets received on the subscriber interface.
          type: integer
        ifl_ingress_bytes:
          description: Number of bytes received on the subscriber interface.
          type: integer
        ifl_egress_packets:
          description: Number of packets sent over  the subscriber interface.
          type: integer
        ifl_egress_bytes:
          description: Number of bytes sent over  the subscriber interface.
          type: integer
        class_0_egress_packets:
          description: Number of sent packets in class 0.
          type: integer
        class_0_egress_bytes:
          description: Number of sent bytes in class 0.
          type: integer
        class_0_egress_dropped_packets:
          description: Number of dropped packets in class 0.
          type: integer
        class_0_egress_dropped_bytes:
          description: Number of dropped bytes in class 0.
          type: integer
        class_1_egress_packets:
          description: Number of sent packets in class 1.
          type: integer
        class_1_egress_bytes:
          description: Number of sent bytes in class 1.
          type: integer
        class_1_egress_dropped_packets:
          description: Number of dropped packets in class 1.
          type: integer
        class_1_egress_dropped_bytes:
          description: Number of dropped bytes in class 1.
          type: integer
        class_2_egress_packets:
          description: Number of sent packets in class 2.
          type: integer
        class_2_egress_bytes:
          description: Number of sent bytes in class 2.
          type: integer
        class_2_egress_dropped_packets:
          description: Number of dropped packets in class 2.
          type: integer
        class_2_egress_dropped_bytes:
          description: Number of dropped bytes in class 2.
          type: integer
        class_3_egress_packets:
          description: Number of sent packets in class 3.
          type: integer
        class_3_egress_bytes:
          description: Number of sent bytes in class 3.
          type: integer
        class_3_egress_dropped_packets:
          description: Number of dropped packets in class 3.
          type: integer
        class_3_egress_dropped_bytes:
          description: Number of dropped bytes in class 3.
          type: integer
        class_4_egress_packets:
          description: Number of sent packets in class 4.
          type: integer
        class_4_egress_bytes:
          description: Number of sent bytes in class 4.
          type: integer
        class_4_egress_dropped_packets:
          description: Number of dropped packets in class 4.
          type: integer
        class_4_egress_dropped_bytes:
          description: Number of dropped bytes in class 4.
          type: integer
        class_5_egress_packets:
          description: Number of sent packets in class 5.
          type: integer
        class_5_egress_bytes:
          description: Number of sent bytes in class 5.
          type: integer
        class_5_egress_dropped_packets:
          description: Number of dropped packets in class 5.
          type: integer
        class_5_egress_dropped_bytes:
          description: Number of dropped bytes in class 5.
          type: integer
        class_6_egress_packets:
          description: Number of sent packets in class 6.
          type: integer
        class_6_egress_bytes:
          description: Number of sent bytes in class 6.
          type: integer
        class_6_egress_dropped_packets:
          description: Number of dropped packets in class 6.
          type: integer
        class_6_egress_dropped_bytes:
          description: Number of dropped bytes in class 6.
          type: integer
        class_7_egress_packets:
          description: Number of sent packets in class 7.
          type: integer
        class_7_egress_bytes:
          description: Number of sent bytes in class 7.
          type: integer
        class_7_egress_dropped_packets:
          description: Number of dropped packets in class 7.
          type: integer
        class_7_egress_dropped_bytes:
          description: Number of dropped bytes in class 7.
          type: integer
        policer_l1_ingress_packets:
          description: Number of received packets in policer level 1.
          type: integer
        policer_l1_ingress_bytes:
          description: Number of received bytes in policer level 1.
          type: integer
        policer_l1_ingress_dropped_packets:
          description: Number of dropped packets in policer level 1.
          type: integer
        policer_l1_ingress_dropped_bytes:
          description: Number of dropped bytes in policer level 1.
          type: integer
        policer_l2_ingress_packets:
          description: Number of received packets in policer level 2.
          type: integer
        policer_l2_ingress_bytes:
          description: Number of received bytes in policer level 2.
          type: integer
        policer_l2_ingress_dropped_packets:
          description: Number of dropped packets in policer level 2.
          type: integer
        policer_l2_ingress_dropped_bytes:
          description: Number of dropped bytes in policer level 2.
          type: integer
        policer_l3_ingress_packets:
          description: Number of received packets in policer level 3.
          type: integer
        policer_l3_ingress_bytes:
          description: Number of received bytes in policer level 3.
          type: integer
        policer_l3_ingress_dropped_packets:
          description: Number of dropped packets in policer level 3.
          type: integer
        policer_l3_ingress_dropped_bytes:
          description: Number of dropped bytes in policer level 3.
          type: integer
        policer_l4_ingress_packets:
          description: Number of received packets in policer level 4.
          type: integer
        policer_l4_ingress_bytes:
          description: Number of received bytes in policer level 4.
          type: integer
        policer_l4_ingress_dropped_packets:
          description: Number of dropped packets in policer level 4.
          type: integer
        policer_l4_ingress_dropped_bytes:
          description: Number of dropped bytes in policer level 4.
          type: integer
    SubscriberHistory:
      description: Provides details about a terminated subscriber session.
      type: object
      properties:
        subscriber_id:
          $ref: "#/components/schemas/SubscriberId"
        subscriber_id_str:
          description: String subscriber_id representation for I-JSON compliance.
          type: string
        subscriber_user_name:
          description: The subscriber's user name.
          type: string
        subscriber_termination_reason:
          description: Reason why the subscriber session got terminated.
          type: string
        accounting_session_id:
          description: The accounting session ID.
          type: string
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        inner_vlan:
          description: |
            The inner VLAN (C-tag) associated with the subscriber.
          type: integer
          minimum: 1
          maximum: 4094
        outer_vlan:
          description: |
            The outer VLAN (S-tag) associated with the subscriber.
          type: integer
          minimum: 1
          maximum: 4094
        client_mac:
          description: The client MAC address.
          type: string
        access_type:
          $ref: "#/components/schemas/SubscriberAccessType"
        agent_remote_id:
          description: The Agent-Remote-ID (ARI).
          type: string
        agent_circuit_id:
          description: The Agent-Circuit-ID (ACI).
          type: string
    SubscriberQosProfile:
      type: object
      description: The subscriber QoS settings.
      properties:
        qos_profile_name:
          description: The QoS profile name.
          type: string
        policers:
          description: The applied policers ordered by their respective level.
          type: object
          properties:
            level_1:
              $ref: "#/components/schemas/SubscriberQosPolicer"
            level_2:
              $ref: "#/components/schemas/SubscriberQosPolicer"
            level_3:
              $ref: "#/components/schemas/SubscriberQosPolicer"
            level_4:
              $ref: "#/components/schemas/SubscriberQosPolicer"
        shapers:
          description: The applied shapers.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/SubscriberQosShaper"
    SubscriberQosPolicer:
      description: Subscriber QoS policer settings.
      type: object
      properties:
        cir_kbps:
          description: The committed information rate (CIR) in kbps.
          type: integer
        cbs_kbps:
          description: The comitted burst size (CBS) in kbps.
          type: integer
        pir_kbps:
          description: The peak information rate (PIR) in kbps.
          type: integer
        pbs_kbps:
          description: The peak burst size (PBS) in kbps.
          type: integer
    SubscriberQosShaper:
      description: Subscriber QoS shaper settings
      type: object
      properties:
        rate_low_kbps:
          description: The low rate in kbps.
          type: integer
        rate_high_kbps:
          description: The high rate in kbps.
          type: integer
    SubscriberUpdate:
      description: Subscriber update request
      type: object
      properties:
        connection_status_message:
          description: connection-status-message
          type: string
        service_profile:
          description: |
            All dynamic QoS settings like shaper and policer rates will be reset 
            if the new service-profile includes a qos-profile attribute also if 
            active qos-profile and old qos-profile is equal. All QoS settings 
            remain unchanged if the referenced service profile does not include 
            the qos-profile attribute. If the referenced service profile updates 
            the qos-profile attribute and additional shaper or policer rates are 
            included in the same request which updates the service-profile, those 
            shaper and policer settings will be applied to the new QoS configuration 
            profile after reset. This means that we reset all incremental changes 
            done before. In example if Voice shaper rate has changed to another value,
            after profile change the default value from profile is used.
          type: string
        qos_profile:
          description: |
            All dynamic QoS settings like shaper and policer rates will be reset 
            if this attribute is present in the request also if new qos-profile 
            and old qos-profile is equal. If additional shaper or policer rates are 
            included in the same request which updates the qos-profile, those shaper 
            and policer settings will be applied to the new QoS configuration after reset.
          type: string
        qos_parent_scheduler:
          description: |
            The parent scheduler element of the scheduler-map assigned to the subscriber 
            can be selected with this attribute.
          type: string
        qos_shaper:
          description: |
            List of multiple shaper settings separated by semicolon. Each shaper setting contains a 
            shaper name, high flow rate and low flow rate separated by comma. 
            The actual shaper rate is the sum of high and low flow rate.
          type: string
          example: <shaper-name>,<high-kbps>,<low-kbps>;<shaper-name>,…​
        qos_policer:
          description: |
            List of multiple policer level settings separated by semicolon. Each setting contains a 
            level, cir, cbs, pir, pbs, max-cir and max-pir separated by comma.
          type: string
          example: <level>,<cir>,<cbs>,<pir>,<pbs>,<max-cir>,<max-pir>;<level>…​
        qos_queue:
          description: |
            List of multiple queue settings separated by semicolon. Each queue setting contains a 
            queue name and queue size in bytes separated by comma.
          type: string
          example: <queue-name>,<size-bytes>;<queue-name>,<size-bytes>;…​
        multifield_classifier:
          description: |
            The multifield classifier can be either derived from qos-profile or directly 
            using this attribute which has priority of the qos-profile.
          type: string
        ipv4_acl_in:
          description: Attach IPv4 subscriber ingress ACL (ACL in upstream direction).
          type: string
        ipv4_acl_out:
          description: Attach IPv4 subscriber egress ACL (ACL in downstream direction).
          type: string
        ipv6_acl_in:
          description: Attach IPv6 subscriber ingress ACL (ACL in upstream direction).
          type: string
        ipv6_acl_out:
          description: Attach IPv6 subscriber egress ACL (ACL in downstream direction).
          type: string
        http_redirect_url:
          description: |
            When HTTP Redirect is enabled for a subscriber either through Ascend-Data-Filter 
            or through the subscriber ACLs, HTTP packets from the subscriber get redirected 
            to the URL set by this attribute.
          type: string
          example: http://portal.rtbrick.com
        igmp_profile:
          description: This attribute specifies the IGMP-profile to be associated with the subscriber.
          type: string
        igmp_status:
          description: This attribute can dynamically enable or disable IGMP for a subscriber.
          type: string
          enum:
            - enabled
            - disabled
        igmp_max_members:
          description: This attribute can specify the number of parallel multicast groups for a subscriber.
          type: integer
          minimum: 1
          maximum: 255
        igmp_version:
          description: This attribute can specify the version of IGMP for a subscriber.
          type: integer
          minimum: 1
          maximum: 3
    TestAaaObject:
      type: object
      description: Test subscriber
      required:
        - subscriber_id
        - access_profile_name
        - aaa_profile_name
      properties:
        subscriber_id:
          description: Subscriber ID.
          type: integer
          minimum: 281474976710656
          maximum: 281479271677951
        access_profile_name:
          description: Name of the access profile.
          type: string
        aaa_profile_name:
          description: Name of the AAA profile.
          type: string
        subscriber_user_name:
          description: Username of the subscriber.
          type: string
        password:
          description: Password of the subscriber.
          type: string
        interface_name:
          description: |
            Interface of the subscriber.
            *WARNING*: This attribute is deprecated. Please use <code>ifp_name</code> instead.
          type: string
          default: ifp-0/0/0
          deprecated: true
        ifp_name:
          description: Mocked physical subscriber interface.
          type: string
        agent_remote_id:
          description: The Agent-Remote-ID (ARI).
          type: string
        agent_circuit_id:
          description: The Agent-Circuit-ID (ACI).
          type: string
        outer_vlan:
          description: Outer VLAN value.
          type: integer
          minimum: 1
          maximum: 4094
        inner_vlan:
          description: Inner VLAN value.
          type: integer
          minimum: 1
          maximum: 4094
        client_mac:
          description: MAC address of the subscriber.
          type: string
          default: 00:00:00:00:00:00

    PhysicalInterfaceSummaryRef:
      type: object
      description: |
        A physical interface summary.
        
        The physical interface summary includes the physical interface state and the logical interfaces defined on the physical interface with their respective operational state.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifp_alias:
          description: The physical interface alias.
          type: string
        ifp_type:
          description: The physical interface type.
          type: string
        mac_address:
          description: The MAC address of the physical interface.
          type: string
        speed:
          description: |
            The configured speed limit.

            The maximum speed can be read from the bandwidth attribute.
          type: string
        bandwidth:
          description: The maximum bandwidth available.
          type: string
        duplex_mode:
          description: The duplex mode.
          type: string
          enum:
            - FULL
            - HALF
        mtu_size:
          description: |
            The configured maximum transfer unit (MTU) size in bytes.
            
            *NOTE:*Use l2_mtu instead.
          type: integer
          deprecated: true
        l2_mtu:
          description: The configured maximum transfer unit (MTU) size in bytes.
          type: integer
        l2_mru:
          description: The maximum receive unit (MRU) size in bytes
          type: integer
        operational_state:
          description: The operational interface state.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative interface state.
          type: string
          enum:
            - UP
            - DOWN
        up_time:
          description: Timestamp since when this interface is UP.
          type: string
          format: date-time
        lag:
          $ref: "#/components/schemas/LinkAggregationGroup"
        logicals:
          description: List of logical interfaces.
          type: object
          properties:
            ifl_name:
              $ref: "#/components/schemas/IflName"
            ifl_alias:
              description: The interface alias.
              type: string
            ifl_type:
              description: The interface type.
              type: string
            administrative_state:
              description: The administrative interface state.
              type: string
              enum:
                - UP
                - DOWN
            operational_state:
              description: The operational interface state.
              type: string
              enum:
                - UP
                - DOWN
            ipv4_addresses:
              description: The assigned IPv4 addresses.
              type: array
              items:
                type: string
                format: ipv4
            ipv6_addresses:
              description: The assigned IPv6 addresses.
              type: array
              items:
                type: string
                format: ipv6
    PhysicalInterfaceSummary:
      type: object
      description: A physical interface
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifp_alias:
          description: The physical interface alias.
          type: string
        mac_address:
          description: The MAC address of the physical interface.
          type: string
        speed:
          description: |
            The configured speed limit.

            The maximum speed can be read from the bandwidth attribute.
          type: string
        bandwidth:
          description: The maximum bandwidth available.
          type: string
        duplex_mode:
          description: The duplex mode.
          type: string
          enum:
            - FULL
            - HALF
        mtu_size:
          description: |
            The configured maximum transfer unit (MTU) size in bytes.
            
            *NOTE:*Use l2_mtu instead.
          type: integer
          deprecated: true
        l2_mtu:
          description: The configured maximum transfer unit (MTU) size in bytes.
          type: integer
        l2_mru:
          description: The maximum receive unit (MRU) size in bytes
          type: integer
        operational_state:
          description: The operational interface state.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative interface state.
          type: string
          enum:
            - UP
            - DOWN
        up_time:
          description: Timestamp since when this interface is UP.
          type: string
          format: date-time
        ifls:
          description: The logical interfaces defined on this physical interface.
          type: array
          items:
            $ref: "#/components/schemas/LogicalInterface"
        lag:
          $ref: "#/components/schemas/LinkAggregationGroup"
        ifp_counters:
          $ref: "#/components/schemas/PhysicalInterfaceCounters"
    PhysicalInterfaceCounters:
      description: |
        Physical interface statistics.

        Define a metric time-series for sampling counters to compute bit and packet rates.
        This counter values are only an indication whether data is transmitted or received.
        It can also be used to verify whether interface statistics have been reset after clearing the counters.
      type: object
      properties:
        tx:
          type: object
          description: Transmitted data counters.
          properties:
            bytes_sent:
              description: Total number of transmitted bytes.
              type: integer
            packets_sent:
              description: Total number of transmitted packets.
              type: integer
            unicast_packets_sent:
              description: Total number of transmitted unicast packets.
              type: integer
            multicast_packets_sent:
              description: Total number of transmitted multicast packets.
              type: integer
            broadcast_packets_sent:
              description: Total number of transmitted broadcast packets.
              type: integer
            packets_dropped:
              description: Total number of dropped packets.
              type: integer
            packets_error:
              description: Total number of erroneous packets.
              type: integer
        rx:
          type: object
          description: Received data counters.
          properties:
            bytes_received:
              description: Total number of received bytes.
              type: integer
            packets_received:
              description: Total number of received packets.
              type: integer
            unicast_packets_received:
              description: Total number of received. unicast packets.
              type: integer
            multicast_packets_received:
              description: Total number of received multicast packets.
              type: integer
            broadcast_packets_received:
              description: Total number of received broadcast packets.
              type: integer
            packets_dropped:
              description: Total number of dropped packets.
              type: integer
            packets_error:
              description: Total number of erroneous packets.
              type: integer
    PhysicalInterface:
      type: object
      description: A physical interface.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifp_alias:
          description: The physical interface alias.
          type: string
        ifp_index:
          description: The interface index (ifIndex)
          type: integer
        ifp_type:
          description: The physical interface type.
          type: string
        mac_address:
          description: The MAC address of the physical interface.
          type: string
        speed:
          description: |
            The configured speed limit.

            The maximum speed can be read from the bandwidth attribute.
          type: string
        bandwidth:
          description: The maximum bandwidth available.
          type: string
        duplex_mode:
          description: The duplex mode.
          type: string
          enum:
            - FULL
            - HALF
        mtu_size:
          description: |
            The configured maximum transfer unit (MTU) size in bytes.
            
            *NOTE:*Use l2_mtu instead.
          type: integer
          deprecated: true
        l2_mtu:
          description: The configured maximum transfer unit (MTU) size in bytes.
          type: integer
        l2_mru:
          description: The maximum receive unit (MRU) size in bytes
          type: integer
        operational_state:
          description: The operational interface state.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative interface state.
          type: string
          enum:
            - UP
            - DOWN
        flap_count:
          description: The flap count.
          type: integer
        carrier_transitions:
          description: |
            Carrier transitions count.
            This attribute is deprecated and has been replaced by the flap_count attribute.
          type: integer
          deprecated: true
        up_time:
          description: Timestamp since when this interface is UP.
          type: string
          format: date-time
        lag:
          $ref: "#/components/schemas/LinkAggregationGroup"
        ifp_counters:
          $ref: "#/components/schemas/PhysicalInterfaceCounters"
    PhysicalInterfaceDetail:
      type: object
      description: A physical interface with its optics and counters.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifp_alias:
          description: The physical interface alias.
          type: string
        ifp_index:
          description: The interface index (ifIndex)
          type: integer
        ifp_type:
          description: The physical interface type.
          type: string
        mac_address:
          description: The MAC address of the physical interface.
          type: string
        speed:
          description: |
            The configured speed limit.

            The maximum speed can be read from the bandwidth attribute.
          type: string
        bandwidth:
          description: The maximum bandwidth available.
          type: string
        duplex_mode:
          description: The duplex mode.
          type: string
          enum:
            - FULL
            - HALF
        mtu_size:
          description: |
            The configured maximum transfer unit (MTU) size in bytes.
            
            *NOTE:*Use l2_mtu instead.
          type: integer
          deprecated: true
        l2_mtu:
          description: The configured maximum transfer unit (MTU) size in bytes.
          type: integer
        l2_mru:
          description: The maximum receive unit (MRU) size in bytes
          type: integer
        operational_state:
          description: The operational interface state.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative interface state.
          type: string
          enum:
            - UP
            - DOWN
        flap_count:
          description: The flap count.
          type: integer
        carrier_transitions:
          description: |
            Carrier transitions count.
            This attribute is deprecated and has been replaced by the flap_count attribute.
          type: integer
          deprecated: true
        up_time:
          description: Timestamp since when this interface is UP.
          type: string
          format: date-time
        optics:
          description: |
            The optics informations

            NOTE: This attribute never got populated.
            Use the /optics endpoint to obtain this information.
          deprecated: true
          type: object
          allOf:
            - $ref: "#/components/schemas/Optic"
        lag:
          $ref: "#/components/schemas/LinkAggregationGroup"
        ifp_counters:
          $ref: "#/components/schemas/PhysicalInterfaceCounters"
    LogicalInterface:
      type: object
      description: A logical interface.
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        ifl_type:
          description: The logical interface type.
          type: string
        ifl_alias:
          description: The logical intreface alias.
          type: string
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        mac_address:
          description: The MAC address on the logical interface.
          type: string
        operational_state:
          description: The operational interface state.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative interface state.
          type: string
          enum:
            - UP
            - DOWN
        ipv4_addresses:
          description: The assigned IPv4 addresses.
          type: array
          items:
            type: string
            format: ipv4
        ipv4_state:
          description: Whether IPv4 is enabled or disabled on this logical interface.
          type: string
          enum:
            - UP
            - DOWN
        ipv4_mtu:
          description: IPv4 maximum transfer unit (MTU) size in bytes.
          type: integer
        ipv6_addresses:
          description: The assigned IPv6 addresses.
          type: array
          items:
            type: string
            format: ipv6
        ipv6_state:
          description: Whether IPv6 is enabled or disabled on this logical interface.
          type: string
          enum:
            - UP
            - DOWN
        ipv6_mtu:
          description: IPv6 maximum transfer unit (MTU) size in bytes.
          type: integer
        mpls_mtu:
          description: MPLS maximum transfer unit (MTU) size in bytes.
          type: integer
        mpls_state:
          description: Whether MPLS is enabled or disabled on this logical interface.
          type: string
          enum:
            - UP
            - DOWN
        outer_vlan:
          description: The outer VLAN ID or null for untagged interfaces.
          type: integer
        inner_vlan:
          description: The inner VLAN ID of double-tagged interfaces. Null for single-tagged or untagged interfaces.
          type: integer
        vlans:
          description: |
            The assigned VLANs.

            The array is filled beginning with the outermost VLANS:
             - The array is _empty_ or _omitted_ for untagged interfaces.
             - The array contains the VLAN-ID for single tagged interfaces.
             - The array contains the outer VLAN-ID followed by the inner VLAN-ID for double tagged interfaces.
          type: array
          items:
            type: integer
        ifl_counters:
          description: Logical interface counters.
          type: object
          properties:
            tx:
              description: Counters for transmitted data.
              type: object
              properties:
                packets_sent:
                  description: Total number of packets sent.
                  type: integer
                packets_dropped:
                  description: Total number of packets dropped.
                  type: integer
                packets_error:
                  description: Total number of erroneous packets.
                  type: integer
                bytes_sent:
                  description: Total number of bytes sent.
                  type: integer
                bytes_dropped:
                  description: Total number of bytes dropped.
                  type: integer
            rx:
              description: Counters for received data.
              type: object
              properties:
                packets_received:
                  description: Total number of packets received.
                  type: integer
                packets_dropped:
                  description: Total number of packets dropped.
                  type: integer
                packets_error:
                  description: Total number of erroneous packets.
                  type: integer
                bytes_received:
                  description: Total number of bytes received.
                  type: integer
                bytes_dropped:
                  description: Total number of bytes dropped.
                  type: integer
    ISISInstanceRef:
      type: object
      description: IS-IS instance summary.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        overload:
          description: IS-IS overload flag value.
          type: boolean
        system_id:
          description: IS-IS system ID.
          type: string
        host_name:
          description: |
            The IS-IS host name.

            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The IS-IS hostname.
          type: string
        neighbors:
          description: Summary of IS-IS neighbors.
          type: object
          properties:
            up_count:
              description: Number of UP neighbors.
              type: integer
            flap_count:
              description: Neighbor flap count.
              type: integer
            level_1_count:
              description: Number of L1 neighbors.
              type: integer
            level_2_count:
              description: Number of L2 neighbors.
              type: integer
        interfaces:
          description: Summary of IS-IS interfaces.
          type: object
          properties:
            level_1_active_count:
              description: Number of active L1 interfaces.
              type: integer
            level_2_active_count:
              description: Number of active L2 interfaces.
              type: integer
        areas:
          description: List of IS-IS areas.
          type: array
          items:
            type: string
        segment_routing:
          $ref: "#/components/schemas/SRGB"
    ISISInstanceNeighbors:
      type: object
      description: IS-IS neighbors grouped by instance.
      properties:
        instance_name:
          description: The IS-IS instance name.
          type: string
        host_name:
          description: |
            The IS-IS host name.
            
            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
        hostname:
          description: The IS-IS hostname.
          type: string
        system_id:
          description: The IS-IS system ID.
          type: string
        areas:
          description: IS-IS areas seen by this switch.
          type: array
          items:
            type: string
        overload:
          description: |
            Status of the IS-IS overload flag.
            The value is true if the overload flag is set and the
            switch runs out of resources and might not compute the LSP in time.
          type: boolean
        neighbors:
          $ref: "#/components/schemas/ISISInstanceNeighborsSummary"
    ISISInstanceNeighbor:
      type: object
      description: IS-IS neighbors grouped by instance.
      properties:
        instance_name:
          description: The IS-IS instance name.
          type: string
        host_name:
          description: |
            The IS-IS host name.

            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The IS-IS hostname.
          type: string
        system_id:
          description: The IS-IS system ID.
          type: string
        areas:
          description: IS-IS areas seen by this switch.
          type: array
          items:
            type: string
        overload:
          description: |
            Status of the IS-IS overload flag.
            The value is true if the overload flag is set and the
            switch runs out of resources and might not compute the LSP in time.
          type: boolean
        neighbors:
          type: array
          items:
            $ref: "#/components/schemas/ISISNeighbor"

    ISISInstance:
      type: object
      description: IS-IS adjacency summary.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        system_id:
          description: IS-IS system ID.
          type: string
        host_name:
          description: |
            IS-IS host name.

            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
          deprecated: true
        hostname:
          description: The IS-IS hostname.
          type: string
        areas:
          description: IS-IS areas seen by this switch.
          type: array
          items:
            type: string
        overload:
          description: |
            Status of the IS-IS overload flag.
            The value is true if the overload flag is set and the
            switch runs out of resources and cannot compute the SFP in time.
          type: boolean
        segment_routing:
          description: Segment routing settings.
          type: object
          allOf:
            - $ref: "#/components/schemas/SRGB"
            - type: object
              properties:
                sr_ids:
                  description: SR indices.
                  type: array
                  items:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/ISISInterfaceSRIDs"
                      - type: object
                        properties:
                          ifl_name:
                            $ref: "#/components/schemas/IflName"
        neighbors:
          $ref: "#/components/schemas/ISISInstanceNeighborsSummary"
        interfaces:
          description: Overview of IS-IS interfaces
          type: array
          items:
            $ref: "#/components/schemas/ISISInterface"
        timers:
          description: IS-IS timers.
          type: object
          properties:
            hold_time:
              description: |
                The hold time in seconds.
                A neighbor is considered down if no hello message is received from the neighbor before the hold time expires.
                The keep-alive interval for sending hello messages is derived from the hold time (keep-alive = hold / 3).
              type: integer
    ISISInstanceNeighborsSummary:
      description: Overview of IS-IS neighbors.
      type: object
      properties:
        up_count:
          description: Total number of UP neighbors.
          type: integer
        flap_count:
          description: Total count of flapped neighbors.
          type: integer
        level_1_count:
          description: Total numbers of level 1 neighbors.
          type: integer
        level_2_count:
          description: Total numbers of level 2 neighbors.
          type: integer
        neighbors:
          description: List of neighbors.
          type: array
          items:
            $ref: "#/components/schemas/ISISNeighbor"

    ISISInstanceInterfaces:
      type: object
      properties:
        instance_name:
          description: The IS-IS instance name.
          type: string
        host_name:
          description: |
            The IS-IS host name.
            
            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
        hostname:
          description: The IS-IS hostname.
          type: string
        system_id:
          description: The IS-IS system ID.
          type: string
        areas:
          description: IS-IS areas seen by this switch.
          type: array
          items:
            type: string
        overload:
          description: |
            Status of the IS-IS overload flag.
            The value is true if the overload flag is set and the
            switch runs out of resources and might not compute the LSP in time.
          type: boolean
        segment_routing:
          description: Segment routing settings.
          type: object
          allOf:
            - $ref: "#/components/schemas/SRGB"
            - type: object
              properties:
                sr_ids:
                  description: SR indices.
                  type: array
                  items:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/ISISInterfaceSRIDs"
                      - type: object
                        properties:
                          ifl_name:
                            $ref: "#/components/schemas/IflName"
        interfaces:
          type: object
          properties:
            level_1_active_count:
              description: Number of active L1 interfaces.
              type: integer
              default: 0
            level_2_active_count:
              description: Number of active L2 interfaces.
              type: integer
              default: 0
            interfaces:
              description: List of ISIS interfaces.
              type: array
              items:
                $ref: "#/components/schemas/ISISInterface"
    ISISInstanceInterface:
      type: object
      properties:
        instance_name:
          description: The IS-IS instance name.
          type: string
        host_name:
          description: |
            The IS-IS host name.
            
            The host_name attribute has been deprecated. Use the hostname attribute instead.
          type: string
        hostname:
          description: The IS-IS hostname.
          type: string
        system_id:
          description: The IS-IS system ID.
          type: string
        areas:
          description: IS-IS areas seen by this switch.
          type: array
          items:
            type: string
        overload:
          description: |
            Status of the IS-IS overload flag.
            The value is true if the overload flag is set and the
            switch runs out of resources and might not compute the LSP in time.
          type: boolean
        interface:
          $ref: "#/components/schemas/ISISInterface"

    ISISInterface:
      type: object
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        isis_ifl_state:
          description: The IS-IS interface state.
          type: string
        level:
          description: The IS-IS level.
          type: string
          enum:
            - L1
            - L2
            - L1L2
        isis_ifl_type:
          description: The IS-IS interface type.
          type: string
        passive:
          description: Whether the interface is passive or not.
          type: boolean
        segment_routing:
          description: Segment routing settings of this interface.
          type: object
          allOf:
            - $ref: "#/components/schemas/SRGB"
            - $ref: "#/components/schemas/ISISInterfaceSRIDs"
        level_1:
          $ref: "#/components/schemas/ISISInterfaceLevel"
        level_2:
          $ref: "#/components/schemas/ISISInterfaceLevel"
    ISISInterfaceLevel:
      description: Contains the metric and statistics of an ISIS level.
      type: object
      properties:
        metric:
          description: The interface metric value.
          type: integer
        adjacency_disabled:
          description: Whether the adjacency level is disabled (true) or not (false).
          type: boolean
        statistics:
          type: object
          properties:
            neighbor_count:
              description: Number of IS-IS neighbors.
              type: integer
            lsp_success_count:
              type: integer
            lsp_fail:count:
              type: integer
            lsp_purge_count:
              type: integer
            csnp_success_count:
              type: integer
            csnp_fail_count:
              type: integer
            psnp_success_count:
              type: integer
            psnp_fail_count:
              type: integer
            csnp_auth_fail_count:
              type: integer
            psnp_auth_fail_count:
              type: integer
            p2p_iih_auth_fail_count:
              type: integer
            ingress:
              type: object
              properties:
                lsp_count:
                  type: integer
                csnp_count:
                  type: integer
                psnp_count:
                  type: integer
                p2p_iih_count:
                  type: integer
            egress:
              type: object
              properties:
                lsp_count:
                  type: integer
                csnp_count:
                  type: integer
                psnp_count:
                  type: integer
                p2p_iih_count:
                  type: integer
    SRGB:
      type: object
      description: Segment routing global block settings.
      properties:
        srgb_base:
          description: SRGB start value.
          type: integer
        srgb_range:
          description: SRGB length.
          type: integer
    ISISInterfaceSRIDs:
      type: object
      description: Segment routing indexes of an ISIS interface.
      properties:
        ipv4_sid:
          description: IPv4 SR index
          type: integer
        ipv6_sid:
          description: IPv6 SR index
          type: integer
        ipv4_anycast_sid:
          description: IPv4 SR anycast index
          type: integer
        ipv6_anycast_sid:
          description: IPv6 SR anycast index
          type: integer

    ISISNeighbor:
      type: object
      description: IS-IS neighbor details.
      properties:
        isis_adjacency_state:
          description: The IS-IS adjacency state.
          type: string
        last_state_transition:
          description: Last state transition time.
          type: string
          format: date-time
        isis_adjacency_type:
          description: The IS-IS adjacency type.
          type: string
        level:
          description: The IS-IS level(s) the adjacency belongs too.
          type: string
          enum:
            - L1
            - L2
            - L1L2
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv4_address:
          description: Local IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: Local IPv6 address.
          type: string
          format: ipv6
        neighbor:
          description: The IS-IS neighbor informations.
          type: object
          properties:
            system_id:
              description: The IS-IS neighbor system ID.
              type: string
            host_name:
              description: |
                The ISIS neighbor host name.
                
                The host_name attribute has been deprecated. Use the hostname attribute instead.
              type: string
              deprecated: true
            hostname:
              description: The IS-IS neighbor hostname.
              type: string
            ipv4_address:
              description: IS-IS neighbor IPv4 address.
              type: string
              format: ipv4
            ipv6_address:
              description: IS-IS neigbor IPv6 address.
              type: string
              format: ipv6
        timers:
          description: Summary of IS-IS timers.
          type: object
          properties:
            hold_time:
              description: |
                The hold time in seconds.
                The neighbor is considered down if no hello message is received before the hold time expires.
              type: integer
            hold_timer:
              description: |
                The hold timer value in seconds,
                i.e. the time until the hold time expires.
              type: integer
        statistics:
          description: Collection of IS-IS error counters maintained for this neighbor adjacency.
          type: object
          properties:
            state_transition_count:
              description: Total number of state transitions.
              type: integer
            last_down_reason:
              description: Information why the adjacency was down last time.
              type: string
            up_time:
              description: Since when this adjacency is UP.
              type: string
              format: date-time
            level_mismatch_error_count:
              description: Count of adjacency down due to level mismatch
              type: integer
            area_mismatch_error_count:
              description: Count of adjacency down due to area mismatch.
              type: integer
            system_id_error_count:
              description: Count of adjacency down due to system ID mismatch.
              type: integer
            subnet_mismatch_error_count:
              description: Count of adjacency down due to subnet mismatch.
              type: integer
            hold_timeout_error_count:
              description: Count of adjacency down due to hold time expiry.
              type: integer
            neighbor_down_error_count:
              description: Count of adjacency down due to neighbor down.
              type: integer
            ifl_down_error_count:
              description: Count of adjacency down due to interface down.
              type: integer
            ifl_config_error_count:
              description: Count of adjacency down due to interaface config.
              type: integer
            admin_reset_count:
              description: Count of adjacency down due to reset from CLI.
              type: integer
            area_config_error_count:
              description: Count of adjacency down due to area config.
              type: integer
            other_error_count:
              description: Count of adjacency down due to other errors.
              type: integer
            received_keep_alive_count:
              description: Count of received hello messages.
              type: integer

    OSPFInstanceSummary:
      allOf:
        - type: object
          description: OSPF instance summary.
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            router_id:
              description: The OSPF router ID.
              type: string
              format: ipv4
            areas:
              type: array
              items:
                $ref: "#/components/schemas/OSPFArea"
        - $ref: "#/components/schemas/OSPFInstanceGlobal"

    OSPFInstanceDetails:
      allOf:
        - type: object
          description: OSPF instance details.
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            router_id:
              description: The OSPF router ID.
              type: string
              format: ipv4
            areas:
              type: array
              items:
                $ref: "#/components/schemas/OSPFArea"
            interfaces:
              type: array
              items:
                $ref: "#/components/schemas/OSPFInterface"
            neighbors:
              type: array
              items:
                $ref: "#/components/schemas/OSPFNeighbor"
        - $ref: "#/components/schemas/OSPFInstanceGlobal"

    OSPFInstanceGlobal:
      type: object
      properties:
        flags:
          description: OSPF protocol flags.
          type: object
          properties:
            mpls_te_shortcut:
              type: boolean
            nssa_translate_lsa:
              type: boolean
            virtual_link:
              type: boolean
            asbr:
              type: boolean
            abr:
              type: boolean
        address_family:
          description: The address family of the OSPF instance.
          type: string
          enum:
            - IPv4
            - IPv6
        flood_interval:
          description: The OSPF flood interval.
          type: integer
        default_metric:
          description: The default value of the OSPF interface metrics.
          type: integer
        opaque_capability:
          description: OSPF opaque capability.
          type: boolean
        segment_routing:
          description: OSPF segment routing capability.
          type: boolean
        srgb_base:
          description: The segment routing global block start value.
          type: integer
        srgb_range:
          description: The size of the segment routing global block.
          type: integer

    OSPFArea:
      type: object
      description: OSPF area information.
      properties:
        area_id:
          description: The OSPF area ID.
          type: string
          format: ipv4
        area_type:
          description: The OSPF area type.
          type: string
          enum:
            - backbone
            - non_backbone
            - stub
            - totally_stub

    OSPFInstanceInterfaces:
      type: object
      description: OSPF interfaces in an instance.
      properties:
        instance_name:
          description: The instance name.
          type: string
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/OSPFInterface"

    OSPFInstanceInterface:
      type: object
      description: A specific OSPF interface.
      properties:
        instance_name:
          description: The instance name.
          type: string
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        interface:
          $ref: "#/components/schemas/OSPFInterface"

    OSPFInterface:
      type: object
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        area_id:
          description: The OSPF area to which the interface belongs.
          type: string
          format: ipv4
        ospf_ifl_state:
          description: The state of the OSPF interface.
          type: string
          enum:
            - Depend_Upon
            - Down
            - Loopback
            - Waiting
            - PointToPoint
            - DROther
            - Backup
            - DR
            - Invalid
        ospf_ifl_type:
          description: The OSPF interface type.
          type: string
          enum:
            - p2p
            - broadcast
        full_neighbors:
          description: Number of neighbors on the OSPF interface.
          type: integer
        metric:
          description: The interface OSPF metric value.
          type: integer
        ipv4_prefix:
          description: The IPv4 address of the interface in CIDR notation.
          type: string
        ipv4_mtu:
          description: The OSPF protocol MTU.
          type: integer
        priority:
          description: OSPF priority on the interface.
          type: integer
        designated_router:
          description: The designated router on the interface.
          type: string
          format: ipv4
        backup_designated_router:
          description: The backup designated router on the interface.
          type: string
          format: ipv4
        hello_interval:
          description: OSPF hello interval on the interface.
          type: integer
        dead_interval:
          description: OSPF dead interval on the interface.
          type: integer
        segment_routing_index:
          description: The segment routing index on the interface.
          type: integer
        authentication_type:
          description: The authentication type on the interface.
          type: string
          enum:
            - none
            - clear_text
            - md5

    OSPFInstanceNeighbors:
      type: object
      description: OSPF neighbors in an instance.
      properties:
        instance_name:
          description: The instance name.
          type: string
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        neighbors:
          type: array
          items:
            $ref: "#/components/schemas/OSPFNeighbor"

    OSPFInstanceNeighbor:
      type: object
      description: A specific OSPF neighbor.
      properties:
        instance_name:
          description: The instance name.
          type: string
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        neighbor:
          $ref: "#/components/schemas/OSPFNeighbor"

    OSPFNeighbor:
      type: object
      description: OSPF neighbor details.
      properties:
        ospf_neighbor_state:
          description: The OSPF neighbor state.
          type: string
          enum:
            - Depend_Upon
            - Deleted
            - Down
            - Attempt
            - Init
            - TwoWay
            - ExStart
            - Exchange
            - Loading
            - Full
            - Max
        area_id:
          description: The area in which the neighbor resides.
          type: string
          format: ipv4
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv4_address:
          description: The local IPv4 address of the neighborship.
          type: string
          format: ipv4
        designated_router:
          description: The designated router on the neighbor interface.
          type: string
          format: ipv4
        backup_designated_router:
          description: The backup designated router on the neighbor interface.
          type: string
          format: ipv4
        neighbor:
          description: OSPF neighbor remote parameters.
          type: object
          properties:
            router_id:
              description: OSPF neighbor router ID.
              type: string
              format: ipv4
            ipv4_address:
              description: OSPF neighbor IPv4 address.
              type: string
              format: ipv4
            priority:
              description: Priority of the OSPF neighbor.
              type: integer
            up_time:
              description: Time the OSPF neighbor is in Up state.
              type: string
              format: date-time
            dead_interval:
              description: OSPF dead interval of the neighbor.
              type: integer

    OSPFv3InstanceSummary:
      allOf:
        - type: object
          description: OSPF instance summary.
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            instance_id:
              description: The OSPFv3 instance ID.
              type: integer
            router_id:
              description: The OSPF router ID.
              type: string
              format: ipv4
            areas:
              type: array
              items:
                $ref: "#/components/schemas/OSPFArea"
        - $ref: "#/components/schemas/OSPFInstanceGlobal"

    OSPFv3InstanceDetails:
      allOf:
        - type: object
          description: OSPF instance details.
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            instance_id:
              description: The OSPFv3 instance ID.
              type: integer
            router_id:
              description: The OSPF router ID.
              type: string
              format: ipv4
            areas:
              type: array
              items:
                $ref: "#/components/schemas/OSPFArea"
            interfaces:
              type: array
              items:
                $ref: "#/components/schemas/OSPFv3Interface"
            neighbors:
              type: array
              items:
                $ref: "#/components/schemas/OSPFv3Neighbor"
        - $ref: "#/components/schemas/OSPFInstanceGlobal"

    OSPFv3InstanceInterfaces:
      type: object
      description: OSPF interfaces in an instance.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        instance_id:
          description: The OSPFv3 instance ID.
          type: integer
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/OSPFv3Interface"

    OSPFv3InstanceInterface:
      type: object
      description: A specific OSPF interface.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        instance_id:
          description: The OSPFv3 instance ID.
          type: integer
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        interface:
          $ref: "#/components/schemas/OSPFv3Interface"

    OSPFv3Interface:
      type: object
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        area_id:
          description: The OSPF area to which the interface belongs.
          type: string
          format: ipv4
        ospf_ifl_state:
          description: The state of the OSPF interface.
          type: string
          enum:
            - Depend_Upon
            - Down
            - Loopback
            - Waiting
            - PointToPoint
            - DROther
            - Backup
            - DR
            - Invalid
        ospf_ifl_type:
          description: The OSPF interface type.
          type: string
          enum:
            - p2p
            - broadcast
        full_neighbors:
          description: Number of neighbors on the OSPF interface.
          type: integer
        metric:
          description: The interface OSPF metric value.
          type: integer
        ipv6_prefix:
          description: The IPv6 address of the interface in CIDR notation.
          type: string
        ipv6_mtu:
          description: The OSPF protocol MTU.
          type: integer
        priority:
          description: OSPF priority on the interface.
          type: integer
        designated_router:
          description: The designated router on the interface.
          type: string
          format: ipv4
        backup_designated_router:
          description: The backup designated router on the interface.
          type: string
          format: ipv4
        hello_interval:
          description: OSPF hello interval on the interface.
          type: integer
        dead_interval:
          description: OSPF dead interval on the interface.
          type: integer
        segment_routing_index:
          description: The segment routing index on the interface.
          type: integer
        authentication_type:
          description: The authentication type on the interface.
          type: string
          enum:
            - none
            - clear_text
            - md5

    OSPFv3InstanceNeighbors:
      type: object
      description: OSPF neighbors in an instance.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        instance_id:
          description: The instance ID.
          type: integer
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        neighbors:
          type: array
          items:
            $ref: "#/components/schemas/OSPFv3Neighbor"

    OSPFv3InstanceNeighbor:
      type: object
      description: A specific OSPF neighbor.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        instance_id:
          description: The instance lsr_id.
          type: string
        router_id:
          description: The OSPF router ID.
          type: string
          format: ipv4
        neighbor:
          $ref: "#/components/schemas/OSPFv3Neighbor"

    OSPFv3Neighbor:
      type: object
      description: OSPF neighbor details.
      properties:
        ospf_neighbor_state:
          description: The OSPF neighbor state.
          type: string
          enum:
            - Depend_Upon
            - Deleted
            - Down
            - Attempt
            - Init
            - TwoWay
            - ExStart
            - Exchange
            - Loading
            - Full
            - Max
        area_id:
          description: The area in which the neighbor resides.
          type: string
          format: ipv4
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv6_address:
          description: The local IPv6 address of the neighborship.
          type: string
          format: ipv6
        designated_router:
          description: The designated router on the neighbor interface.
          type: string
          format: ipv4
        backup_designated_router:
          description: The backup designated router on the neighbor interface.
          type: string
          format: ipv4
        neighbor:
          description: OSPF neighbor remote parameters.
          type: object
          properties:
            router_id:
              description: OSPF neighbor router ID.
              type: string
              format: ipv4
            ipv6_address:
              description: OSPF neighbor IPv6 address.
              type: string
              format: ipv6
            priority:
              description: Priority of the OSPF neighbor.
              type: integer
            up_time:
              description: Time the OSPF neighbor is in Up state.
              type: string
              format: date-time
            dead_interval:
              description: OSPF dead interval of the neighbor.
              type: integer

    LldpGlobalNeighbors:
      type: object
      description: LLDP neighbors
      properties:
        mode:
          description: Global mode always.
          type: string
        system_name:
          description: The local LLDP system name.
          type: string
        system_description:
          description: An optional local LLDP system description.
          type: string
        transmit_interval:
          description: The local LLDP Tx interval.
          type: integer
        transmit_holdime:
          description: The local LLDP Tx holdtime.
          type: integer
        neighbors:
          type: array
          items:
            $ref: "#/components/schemas/LldpNeighbor"

    LldpGlobalNeighbor:
      type: object
      description: A specific LLDP neighbor.
      properties:
        mode:
          description: Global mode always.
          type: string
        system_name:
          description: The local LLDP system name.
          type: string
        system_description:
          description: An optional local LLDP system description.
          type: string
        transmit_interval:
          description: The local LLDP Tx interval.
          type: integer
        transmit_holdime:
          description: The local LLDP Tx holdtime.
          type: integer
        neighbor:
          $ref: "#/components/schemas/LldpNeighbor"

    LldpNeighbor:
      type: object
      description: LLDP neighbor parameters.
      properties:
        port_id:
          description: Local LLDP port ID.
          type: string
        status:
          description: The LLDP neighbor state.
          type: string
        last_sent:
          description: Time of last LLDP packet sent to neighbor.
          type: string
          format: date-time
        last_received:
          description: Time of last LLDP packet received from neighbor.
          type: string
          format: date-time
        neighbor:
          description: Parameters of remote neighbor.
          type: object
          properties:
            chassis_id:
              description: Neighbor chassis ID in MAC address format.
              type: string
            port_id:
              description: Neighbor LLDP port ID.
              type: string
            port_description:
              description: Neighbor port description.
              type: string
            system_name:
              description: Neighbor system name.
              type: string
            ttl:
              description: Time-to-Live received from neighbor.
              type: string
            timeout:
              description: Timeout received from neighbor.
              type: string
    VLANProfile:
      type: object
      description: List of VLAN profile objects
      required:
        - ifp_name
      properties:
        ifp_name:
          description: Physical interface.
          type: string
        outer_vlan_min:
          description: Outer VLAN range minimum value.
          type: integer
          minimum: 1
          maximum: 4094
        outer_vlan_max:
          description: Outer VLAN range maximum value.
          type: integer
          minimum: 1
          maximum: 4094
        inner_vlan_min:
          description: Inner VLAN range minimum value.
          type: integer
          minimum: 1
          maximum: 4094
        inner_vlan_max:
          description: Inner VLAN range maximum value.
          type: integer
          minimum: 1
          maximum: 4094
        access_profile_name:
          description: Name of the access profile.
          type: string
        aaa_profile_name:
          description: Name of the AAA profile.
          type: string
        service_profile_name:
          description: Name of the service profile.
          type: string
    VLANProfileBatch:
      type: object
      description: |
        Contains the VLAN profiles to be added or removed within a single batch operation.
      properties:
        remove:
          description: VLAN profiles to be removed
          type: array
          items:
            $ref: "#/components/schemas/VLANProfile"
        store:
          description: VLAN profiles to be stored
          type: array
          items:
            $ref: "#/components/schemas/VLANProfile"
    L2bsaServiceConfig:
      type: object
      description: |
        The ephemeral configuration of a L2BSA service.
        This configuration is lost if the switch reboots.
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        anp_vlan:
          description: The ANP-VLAN ID.
          type: integer
          minimum: 1
          maximum: 4094
        aaa_profile_name:
          description: The AAA profile name.
          type: string
        l2x:
          $ref: "#/components/schemas/L2xConfig"
        qos:
          type: object
          description: Dynamic QoS settings.
          properties:
            qos_profile_name:
              description: The QoS configuration profile name.
              type: string
            parent_scheduler:
              description: The parent scheduler element of the scheduler-map assigned to the subscriber can be selected with this attribute. If not present, the scheduler-map will be directly bound to the corresponding IFP.
              type: string
              example: pon1
            shaper:
              description: Dynamic QoS shaper string which contains a list of multiple shaper settings separated by semicolon.
              type: string
              example: name=shaper_session,high=14000,low=2000;name=shaper_voice,high=2000
            policer:
              description: Dynamic QoS policer string which contains a list of multiple policer level settings separated by semicolon.
              type: string
              example: level=4,cir=1m,cbs=256;level=3,cir=2m,cbs=512
            queue:
              description: Dynamic QoS queue string which contains a list of multiple queue sizes separated by semicolon.
              type: string
              example: name=BestEffor,size=65000;name=Voice,size=20000
        access_line_info:
          $ref: "#/components/schemas/AccessLineInfo"
    L2bsaServiceConfigBatch:
      type: object
      description: Contains the L2BSA service configurations to be added and removed with this batch.
      properties:
        remove:
          description: The L2BSA service configurations to be removed.
          type: array
          items:
            $ref: "#/components/schemas/L2bsaServiceConfig"
        store:
          description: The L2BSA service configurations to be stored.
          type: array
          items:
            $ref: "#/components/schemas/L2bsaServiceConfig"
    L2xConfig:
      type: object
      description: L2X settings.
      properties:
        ingress_nexthop:
          description: The L2X nexthop IPv4 or IPv6 address.
          type: string
        ingress_lookup_instance:
          description: The routing instance of the nexthop address.
          type: string
          default: default
        ingress_service_label:
          description: The L2X service MPLS label for ingress traffic (sent label).
          type: integer
          minimum: 1
          maximum: 1048575
        egress_service_label:
          description: The L2X service MPLS label for egress traffic (receive label).
          type: integer
          minimum: 1
          maximum: 1048575
    AccessLineInfo:
      type: object
      description: The access line information.
      properties:
        agent_circuit_id:
          description: The Agent-Circuit-ID (ACI).
          type: string
        agent_remote_id:
          description: The Agent-Remote-ID (ARI).
          type: string
        upstream:
          description: Upstream access line attributes.
          type: object
          properties:
            actual_rate:
              description: Actual upstream data rate.
              type: integer
            min_rate:
              description: Minimum upstream data rate.
              type: integer
            attainable_rate:
              description: Attainable upstream data rate.
              type: integer
            max_rate:
              description: Maximum upstream data rate.
              type: integer
            min_rate_low_power:
              description: Minimum upstream data rate in low power state.
              type: integer
            max_interleave_delay:
              description: Maximum upstream interleaving delay.
              type: integer
            actual_interleave_delay:
              description: Actual upstream interleaving delay.
              type: integer
            expected_throughput:
              description: Expected Throughput (ETR).
              type: integer
            attainable_expected_throughput:
              description: Attainable Expected Throughput (ATTETR).
              type: integer
            gamma_data_rate:
              description: Gamma Data Rate (GDR).
              type: integer
            attainable_gamma_data_rate:
              description: Attainable Gamma Data Rate (ATTGDR).
              type: integer
            ont_onu_max_rate:
              description: ONT/ONU upstream maximum data rate.
              type: integer
            ont_onu_assured_rate:
              description: ONT/ONU upstream assured data rate.
              type: integer
            pon_max_rate:
              description: PON tree upstream maximum data rate.
              type: integer
        downstream:
          description: Downstream access line attributes.
          type: object
          properties:
            actual_rate:
              description: Actual downstream data rate.
              type: integer
            min_rate:
              description: Minimum downstream data rate.
              type: integer
            attainable_rate:
              description: Attainable downstream data rate.
              type: integer
            max_rate:
              description: Maximum downstream data rate.
              type: integer
            min_rate_low_power:
              description: Minimum downstream data rate in low power state.
              type: integer
            max_interleave_delay:
              description: Maximum downstream interleaving delay.
              type: integer
            actual_interleave_delay:
              description: Actual downstream interleaving delay.
              type: integer
            expected_throughput:
              description: Downstream Expected Throughput (ETR).
              type: integer
            attainable_expected_throughput:
              description: Downstream Attainable Expected Throughput (ATTETR).
              type: integer
            gamma_data_rate:
              description: Downstream Gamma Data Rate (GDR).
              type: integer
            attainable_gamma_data_rate:
              description: Downstream Attainable Gamma Data Rate (ATTGDR).
              type: integer
            ont_onu_average_rate:
              description: ONT/ONU downstream average data rate.
              type: integer
            ont_onu_peak_rate:
              description: ONT/ONU downstream peak data rate.
              type: integer
            pon_max_rate:
              description: PON tree downstream maximum data rate.
              type: integer
        data_link:
          description: Access-Loop-Encapsulation.
          type: object
          properties:
            data_link_type:
              description: Data link type field.
              type: string
              enum:
                - ATM_AAL5
                - ETHERNET
            encapsulation_1:
              description: Data link encapsulation 1 field.
              type: string
              enum:
                - NA
                - UNTAGGED_ETHERNET
                - SINGLE_TAGGED_ETHERNET
                - DOUBLE_TAGGED_ETHERNET
            encapsulation_2:
              description: Data link encapsulation 2 field.
              type: string
              enum:
                - NA
                - PPPOA_LLC
                - PPPOA_NULL
                - IPOA_LLC
                - IPOA_NULL
                - ETHERNET_OVER_AAL5_LLC_WITH_FCS
                - ETHERNET_OVER_AAL5_LLC_WITHOUT_FCS
                - ETHERNET_OVER_AAL5_NULL_WITH_FCS
                - ETHERNET_OVER_AAL5_NULL_WITHOUT_FCS
        dsl_type:
          description: DSL type
          type: string
          enum:
            - OTHER
            - ADSL1
            - ADSL2
            - VDSL1
            - VDSL2
            - SDSL
            - G.FAST
            - VDSL2_ANNEX_Q
            - SDSL_BONDED
            - VDSL2_BONDED
            - G.FAST_BONDED
            - VDSL2_ANNEX_Q_BONDED
        pon_type:
          description: PON type
          type: string
          enum:
            - OTHER
            - GPON
            - XG-PON1
            - TWDM-PON
            - XGS-PON
            - WDM-PON
            - UNKNOWN
    A10nspConfig:
      type: object
      description: |
        The ephemeral configuration of a A10-NSP L2X service.
        This configuration is lost if the switch reboots.
      properties:
        lag_interface_name:
          type: string
        s_vlan:
          description: The S-VLAN ID.
          type: integer
          minimum: 1
          maximum: 4094
        s_vlan_range:
          description: |
            The total number of S-VLANs allocated by this endpoint.
          type: integer
          minimum: 1
        s_vlan_range_low:
          description: The low boundary of the configured S-VLAN range.
          type: integer
        s_vlan_range_high:
          description: The high boundary of the configured S-VLAN range.
          type: integer
        s_vlan_ethertype:
          description: The S-VLAN ethertype, which is either 802.1q (0x8100) or 802.1ad (0x88A8).
          type: string
          enum:
            - "802.1q"
            - "802.1ad"
          example: 802.1q
        anp_vlan:
          description: The ANP-VLAN ID. The ANP-VLAN defaults to the S-VLAN if not specified. ANP-VLANs must not be used in combination with S-VLAN ranges.
          type: integer
          minimum: 1
          maximum: 4094
        l2x:
          $ref: "#/components/schemas/L2xConfig"
    A10nspConfigBatch:
      description: A10NSP endpoint configuration batch instructions.
      type: object
      properties:
        remove:
          description: A10NSP L2X endpoints to be removed.
          type: array
          items:
            $ref: "#/components/schemas/A10nspConfig"
        store:
          description: A10NSP L2X endpoints to be stored.
          type: array
          items:
            $ref: "#/components/schemas/A10nspConfig"
    PIMDesignatedRouter:
      description: Settings of the selected PIM designated router (DR).
      type: object
      properties:
        ipv4_address:
          description: DR IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: DR IPv6 address.
          type: string
          format: ipv6
        priority:
          description: The DR election priority of the selected designated router.
          type: integer
    PIMNeighborState:
      description: The operational state of the discovered PIM neighbor.
      type: string
    PIMInterfaceState:
      description: The PIM interface state.
      type: string
    PIMInstanceRef:
      description: A reference to a PIM instances.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        afi:
          description: The address-family identifier.
          type: string
    PIMInstance:
      description: PIM instance state.
      type: object
      allOf:
        - $ref: "#/components/schemas/PIMInstanceRef"
        - type: object
          properties:
            neighbors:
              type: array
              items:
                $ref: "#/components/schemas/PIMInstanceNeighbor"
            interfaces:
              type: array
              items:
                $ref: "#/components/schemas/PIMInstanceInterface"
    PIMInstanceNeighbor:
      description: PIM instance neighbor settings.
      type: object
      properties:
        pim_neighbor_state:
          $ref: "#/components/schemas/PIMNeighborState"
        last_state_transition:
          description: Last PIM neighbor state transition.
          type: string
          format: date-time
        ifl_name:
          $ref: "#/components/schemas/IflName"
        pim_ifl_state:
          $ref: "#/components/schemas/PIMInterfaceState"
        ipv4_address:
          description: The primary IPv4 address of the PIM interface.
          type: string
          format: ipv4
        ipv6_address:
          description: The primary IPv6 address of the PIM interface.
          type: string
          format: ipv6
        generation_id:
          description: The PIM interface generation ID.
          type: integer
        designated_router_priority:
          description: The priority of this interface in the designated router election.
          type: integer
          default: 1
        designated_router_elections:
          description: DR elections count
          type: integer
        designated_router:
          $ref: "#/components/schemas/PIMDesignatedRouter"
        timers:
          type: object
          description: Timer associated with this PIM neighbor.
          properties:
            hold_down_interval:
              description: The configured hold down interval in seconds.
              type: integer
            hold_down_timer:
              description: The hold down timer value in seconds.
              type: integer
        neighbor:
          description: Discovered PIM neighbor settings.
          type: object
          properties:
            generation_id:
              description: The PIM generation identifier.
              type: integer
            ipv4_address:
              description: The neighbor IPv4 address.
              type: string
              format: ipv4
            ipv6_address:
              description: The neighbor IPv6 address.
              type: string
              format: ipv6
            designated_router_priority:
              description: The neighbor's priority in the designated router elecetion process.
              type: integer
    PIMInstanceInterface:
      description: PIM instance interface settings.
      type: object
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        pim_ifl_state:
          $ref: "#/components/schemas/PIMInterfaceState"
        ipv4_address:
          description: The primary IPv4 address of the PIM interface.
          type: string
          format: ipv4
        ipv6_address:
          description: The primary IPv6 address of the PIM interface.
          type: string
          format: ipv6
        generation_id:
          description: The PIM generation identifier.
          type: integer
        neighbors:
          description: Total number of PIM neighbors on this interface.
          type: integer
        designated_router_priority:
          description: The priority of this interface in the designated router election.
          type: integer
          default: 1
        designated_router_elections:
          description: Number of designated router elections being executed.
          type: integer
        designated_router:
          $ref: "#/components/schemas/PIMDesignatedRouter"
        statistics:
          type: object
          description: PIM interface statistics.
          properties:
            hello:
              $ref: "#/components/schemas/PIMMessageStatistics"
            assert:
              $ref: "#/components/schemas/PIMMessageStatistics"
            membership:
              $ref: "#/components/schemas/PIMMessageStatistics"
        timers:
          type: object
          description: Configured timer values.
          properties:
            hello_interval:
              description: The hello timer interval in seconds.
              type: integer
            hold_down_interval:
              description: The hold down interval in seconds.
              type: integer
            join_prune_interval:
              description: The Join/Prune interval in seconds.
              type: integer
            override_interval:
              description: The override interval in milliseconds.
              type: integer
            prune_delay_interval:
              description: The prune delay interval in milliseconds.
              type: integer
        capabilities:
          type: object
          description: "PIM interface capabilities"
          properties:
            disable_join_suppression:
              description: Flag that indicates whether Join suppression is disabled (true) or not (false)
              type: boolean
            use_designated_router_priority:
              description: A flag that indicates whether the designated router (DR) election uses the DR priority.
              type: boolean
            effective_prune_delay_interval:
              description: The effective prune delay interval in milliseconds.
              type: integer
            effective_override_interval:
              description: The effective override interval in milliseconds.
              type: integer
    PIMMessageStatistics:
      description: Counter of sent/received PIM messages.
      type: object
      properties:
        sent:
          description: Sent messages count.
          type: integer
        received:
          description: Received messages count.
          type: integer
    PIMInterfaces:
      description: PIM interfaces grouped by instances.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/PIMInstanceInterface"
    PIMInterface:
      description: PIM interface settings.
      type: object
      allOf:
        - type: object
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
        - $ref: "#/components/schemas/PIMInstanceInterface"
    PIMNeighbors:
      description: PIM neighbors grouped by instances.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        neighbors:
          type: array
          items:
            $ref: "#/components/schemas/PIMInstanceNeighbor"
    PIMNeighbor:
      description: PIM neighbor settings.
      type: object
      allOf:
        - type: object
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
        - $ref: "#/components/schemas/PIMInstanceNeighbor"

    SystemHardware:
      type: object
      description: System hardware inventory.
      properties:
        chassis:
          $ref: "#/components/schemas/Chassis"
        psus:
          type: array
          items:
            $ref: "#/components/schemas/PSU"
        fans:
          type: array
          items:
            $ref: "#/components/schemas/Fan"
        optics:
          type: array
          items:
            $ref: "#/components/schemas/OpticModule"
        transceiver:
          type: array
          items:
            $ref: "#/components/schemas/TransceiverModuleInfo"
    Chassis:
      type: object
      description: The hardware chassis.
      properties:
        product_name:
          description: The product name.
          type: string
        vendor_name:
          description:  The vendor name.
          type: string
        mac:
          description: The system MAC address.
          type: string
        date_manufactured:
          description: |
            The date when the system was manufactured.
          type: string
          format: date
        manufacturer:
          description: The manufacturer name.
          type: string
        onie_version:
          description: The ONIE SW version.
          type: string
        diag_version:
          description: The diag SW version.
          type: string
        part_number:
          description: The part number.
          type: string
        platform_name:
          description: The platform name.
          type: string
        serial_number:
          description: The chassis serial number.
          type: string
        country_code:
          description: The country where the system has been manufactured.
          type: string
    PSU:
      type: object
      description: The power supply units.
      properties:
        psu_name:
          description: The name of the PSU.
          type: string
        manufacturer:
          description: The PSU manufacturer.
          type: string
        model:
          description: |
            The PSU model.
            
            This attribute has been deprecated. Use the part_number attribute instead.
          deprecated: true
          type: string
        serial_number:
          description: The PSU serial number.
          type: string
        part_number:
          description: The PSU part number.
          type: string
        status:
          description: The presense and operational state of the PSU.
          type: array
          items:
            type: string
    Fan:
      type: object
      description: The fan module.
      properties:
        fan_name:
          description: The name of the fan.
          type: string
        location:
          description: The module on which the fan resides.
          type: string
        model:
          description: The fan model.
          type: string
        serial_number:
          description: The fan serial number.
          type: string
        status:
          description: The presense and operational state of the fan.
          type: array
          items:
            type: string

    InstanceUnicastRoutes:
      type: object
      description: Route information for an instance and AFI/SAFI.
      properties:
        instance_name:
          description: The routing instance name.
          type: string
        afi:
          description: The address family.
          type: string
        safi:
          description: The sub-address family.
          type: string
        routes:
          type: array
          items:
            $ref: "#/components/schemas/Routes"
    Routes:
      type: object
      description: Route table entries for an IP prefix or MPLS label.
      properties:
        prefix4:
          description: IPv4 address with mask. Applicable to AFI 'ipv4' only
          type: string
        prefix6:
          description: IPv6 address with mask. Applicable to AFI 'ipv6' only.
          type: string
        label:
          description: MPLS label value. Applicable to AFI 'mpls' only.
          type: integer
        route_distinguisher:
          description: Route distingusher.
          type: string
        source:
          description: Soure of the route.
          type: string
        preference:
          description: Protocol preference.
          type: integer
        next_hops:
          type: array
          items:
            $ref: "#/components/schemas/NextHops"
        date_created:
          description: Route creation time.
          type: string
          format: date-time
    RoutesSummary:
      type: object
      description: Contains the number of routes in the RIB grouped by originating protocol for both, self-originated and imported routes.
      allOf:
        - $ref: "#/components/schemas/RoutesCount"
        - type: object
          properties:
            self_originated_routes:
              $ref: "#/components/schemas/RoutesCount"
            imported_routes:
              $ref: "#/components/schemas/RoutesCount"
    RoutesCount:
      type: object
      description: The number of routes grouped by origination protocol.
      properties:
        arp_nd:
          type: integer
          description: ARP ND routes count
        direct:
          type: integer
          description: direct routes count
        static:
          type: integer
          description: static routes count
        bgp:
          type: integer
          description: BGP routes count
        bgp_local:
          type: integer
          description: Local BGP routes count
        bgp_local_origin:
          type: integer
          description: Local origin BGP routes count
        isis:
          type: integer
          description: ISIS routes count
        ospf:
          type: integer
          description: OSPF routes count
        ldp:
          type: integer
          description: LDP routes count
        pim:
          type: integer
          description: PIM routes count
        igmp:
          type: integer
          description: IGMP routes count
        l2tpv2:
          type: integer
          description: L2TPv2 routes count
        ipoe:
          type: integer
          description: IPoE routes count
        ppp:
          type: integer
          description: PPP routes count
        dhcp:
          type: integer
          description: DHCP routes count
        local:
          type: integer
          description: local routes count
        rib:
          type: integer
          description: RIB routes count
        mrib:
          type: integer
          description: mRIB routes count
        total:
          type: integer
          description: Total routes count
    RouteCounts:
      type: object
      description: Contains the number of routes in the RIB grouped by originating protocol
      properties:
        arp_nd:
          type: integer
          description: ARP ND routes count
        direct:
          type: integer
          description: direct routes count
        static:
          type: integer
          description: static routes count
        bgp:
          type: integer
          description: BGP routes count
        bgp_local:
          type: integer
          description: Local BGP routes count
        bgp_local_origin:
          type: integer
          description: Local origin BGP routes count
        isis:
          type: integer
          description: ISIS routes count
        ospf:
          type: integer
          description: OSPF routes count
        ldp:
          type: integer
          description: LDP routes count
        pim:
          type: integer
          description: PIM routes count
        igmp:
          type: integer
          description: IGMP routes count
        l2tpv2:
          type: integer
          description: L2TPv2 routes count
        ipoe:
          type: integer
          description: IPoE routes count
        ppp:
          type: integer
          description: PPP routes count
        dhcp:
          type: integer
          description: DHCP routes count
        local:
          type: integer
          description: local routes count
        rib:
          type: integer
          description: RIB routes count
        mrib:
          type: integer
          description: mRIB routes count
        l3_all:
          type: integer
          description: L3VPN routes count
        l2_all:
          type: integer
          description: L2VPN routes count
        total:
          type: integer
          description: Total routes count
    NextHops:
      type: object
      description: Next hop details.
      properties:
        nexthop_ip_address:
          description: IP address of the next hop.
          type: string
          format: ipv4
        nexthop_mac_address:
          description: MAC addess of the next hop.
          type: string
        exit_ifl:
          description: Logical exit interface.
          type: string
        nexthop_type:
          description: Type of the next hop.
          type: string
        nexthop_action:
          description: MLPS label operation.
          type: string
        mpls_label_stack:
          description: MPLS labels for the next hop.
          type: array
          items:
            type: string
        lookup_instance:
          description: Routing instance in which the NH is resolved.
          type: string
        lookup_afi:
          description: Address family of the next hop.
          type: string
        lookup_safi:
          description: Sub-address family of the next hop.
          type: string
        date_created:
          description: Next hop creation time.
          type: string
          format: date-time
    InstanceMulticastRoutes:
      type: object
      description: Multicast route information for an instance and AFI/SAFI.
      properties:
        instance_name:
          description: The routing instance name.
          type: string
        afi:
          description: The address family.
          type: string
        safi:
          description: The sub-address family.
          type: string
        multicast_routes:
          type: array
          items:
            $ref: "#/components/schemas/Mroutes"
    Mroutes:
      type: object
      description: Multicast route table entries for a multicast group.
      properties:
        multicast_group4:
          description: IPv4 group address with mask. Applicable to AFI 'ipv4' only
          type: string
        multicast_group6:
          description: IPv6 group address with mask. Applicable to AFI 'ipv6' only.
          type: string
        multicast_source4:
          description: IPv4 source address with mask. Applicable to AFI 'ipv4' only
          type: string
        multicast_source6:
          description: IPv6 source address with mask. Applicable to AFI 'ipv6' only.
          type: string
        source:
          description: Soure of the route.
          type: string
        preference:
          description: Protocol preference.
          type: integer
        multicast_route_type:
          description: Multicast route type.
          type: string
        next_hops:
          type: array
          items:
            $ref: "#/components/schemas/MCNextHops"
        date_created:
          description: Route creation time.
          type: string
          format: date-time
    MCNextHops:
      type: object
      description: Next hop details.
      properties:
        exit_ifl:
          description: Logical exit interface.
          type: string
        nexthop_mac_address:
          description: MAC addess of the next hop.
          type: string
        nexthop_type:
          description: Type of the next hop.
          type: string
        nexthop_action:
          description: MLPS label operation.
          type: string
        mpls_label_stack:
          description: MPLS labels for the next hop.
          type: array
          items:
            type: string
        lookup_instance:
          description: Routing instance in which the NH is resolved.
          type: string
        lookup_afi:
          description: Address family of the next hop.
          type: string
        lookup_safi:
          description: Sub-address family of the next hop.
          type: string
        date_created:
          description: Next hop creation time.
          type: string
          format: date-time
    LinkAggregationGroup:
      description: Link aggreation group (LAG) state.
      type: object
      properties:
        mode:
          description: The LAG mode.
          type: string
          enum:
            - dynamic
            - lacp
        members:
          description: The member interfaces.
          type: array
          items:
            $ref: "#/components/schemas/LinkAggregationGroupMember"
    LinkAggregationGroupMember:
      description: A member interface of a link aggregation group.
      type: object
      properties:
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        operational_state:
          description: The operational state of the member interface.
          type: string
          enum:
            - UP
            - DOWN
        administrative_state:
          description: The administrative state of the member interface
          type: string
          enum:
            - UP
            - DOWN
        speed:
          description: |
            The configured speed limit.
            The maximum speed can be read from the bandwidth attribute.
          type: string
        bandwidth:
          description: The maximum bandwidth available.
          type: string
        lag_member_state:
          description: The LAG member state indicates whether this LAG member is resolved or unresolved.
          type: string
          enum:
            - RESOLVED
            - UNRESOLVED
    LDPSessionState:
      description: Enumeration of LDP sessions states.
      type: string
      enum:
        - NON_EXISTENT
        - INITIALIZED
        - OPENREC
        - OPENSENT
        - OPERATIONAL
    LDPLabelRetentionMode:
      description: Label retention mode.
      type: string
      enum:
        - CONSERVATIVE
        - LIBERAL
    LDPLabelAdvertismentMode:
      description: Label mapping control mode.
      type: string
      enum:
        - ORDERED
        - INDEPENDENT
    LDPLabelDistributionControlMode:
      description: Label mapping advertisment mode.
      type: string
      enum:
        - DOWNSTREAM_UNSOLICITED
        - DOWNSTREAM_ON_DEMAND
    LDPRole:
      description: The role during TCP connection and LDP session establishment.
      type: string
      enum:
        - ACTIVE
        - PASSIVE
    LDPInstanceRef:
      description: A routing instance with LDP enabled.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        lsr_id:
          description: The LSR identifier.
          type: string
    LDPInstanceSessions:
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        lsr_id:
          description: The LSR identifier.
          type: string
        capabilities:
          $ref: "#/components/schemas/LDPCapabilities"
        sessions:
          $ref: "#/components/schemas/LDPInstanceSessionsSessions"
        statistics:
          $ref: "#/components/schemas/LDPInstanceStatistics"
    LDPPeer:
      type: object
      properties:
        ipv4_address:
          type: string
          format: ipv4
        ipv6_address:
          type: string
          format: ipv6
        ldp_role:
          $ref: "#/components/schemas/LDPRole"
    LDPInstanceStatistics:
      type: object
      description: LDP statistics of a routing instance.
      properties:
        link_adjacencies_count:
          description: Link adjacencies count.
          type: integer
        targeted_adjacencies_count:
          description: Targeted adjacencies count.
          type: integer
    LDPInstanceSessionsSessions:
      type: object
      description: LDP session
      properties:
        non_existent:
          description: Number of LDP sessions in NONEXISTENT state, i.e. session establishment has not started.
          type: integer
        opensent_count:
          description: Number of LDP sessions in OPENSENT state.
          type: integer
        openrec_count:
          description: Number of LDP sessions in OPENREC state.
          type: integer
        initialized_count:
          description: Number of initialized LDP session.
          type: integer
        operational_count:
          description: Number of operational LDP sessions.
          type: integer
        sessions:
          description: List of LDP sessions.
          type: array
          items:
            $ref: "#/components/schemas/LDPSession"
    LDPSession:
      type: object
      properties:
        ldp_id:
          description: The LSR lable-space identifier.
          type: string
        lsr_id:
          description: The LSR identifier.
          type: string
        ldp_state:
          $ref: "#/components/schemas/LDPSessionState"
        ldp_label_advertisment_mode:
          $ref: "#/components/schemas/LDPLabelAdvertismentMode"
        ldp_label_distribution_control_mode:
          $ref: "#/components/schemas/LDPLabelDistributionControlMode"
        ldp_label_retention_mode:
          $ref: "#/components/schemas/LDPLabelRetentionMode"
        ldp_session_flaps:
          description: LDP session flap count
          type: integer
        last_state_transition:
          description: Last session state transition.
          type: string
          format: date-time
        ldp_role:
          $ref: "#/components/schemas/LDPRole"
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ipv4_address:
          description: The local IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: The local IPv6 address.
          type: string
          format: ipv6
        peer:
          type: object
          description: The peer of this LSR session.
          properties:
            lsr_id:
              description: The LSR identifier.
              type: string
            ldp_role:
              $ref: "#/components/schemas/LDPRole"
            ipv4_address:
              description: The peer IPv4 address.
              type: string
              format: ipv4
            ipv6_address:
              description: The peer IPv6 address.
              type: string
              format: ipv6
        statistics:
          description: LDP session statistics.
          type: object
          properties:
            labels:
              type: object
              properties:
                fecs_received:
                  description: Number of received FECs.
                  type: integer
                fecs_sent:
                  description: Number of FECs sent.
                  type: integer
            session:
              type: object
              properties:
                ingress:
                  type: object
                  properties:
                    init:
                      description: Number of received init messages.
                      type: integer
                      minimum: 0
                    keep_alive:
                      description: Number of received keep-alive messages.
                      type: integer
                      minimum: 0
                    notify:
                      description: Number of received notify messages.
                      type: integer
                      minimum: 0
                    label_mapping:
                      description: Number of received label mapping messages.
                      type: integer
                      minimum: 0
                    label_withdraw:
                      description: Number of received label withdraw messages.
                      type: integer
                      minimum: 0
                    label_release:
                      description: Number of received label release messages.
                      type: integer
                      minimum: 0
                    label_address:
                      description: Number of received address messages.
                      type: integer
                      minimum: 0
                    address_withdraw:
                      description: Number of received address withdraw messages.
                      type: integer
                      minimum: 0
                egress:
                  type: object
                  properties:
                    init:
                      description: Number of sent init messages.
                      type: integer
                      minimum: 0
                    keep_alive:
                      description: Number of sent keep-alive messages.
                      type: integer
                      minimum: 0
                    notify:
                      description: Number of sent notify messages.
                      type: integer
                      minimum: 0
                    label_mapping:
                      description: Number of sent label mapping messages.
                      type: integer
                      minimum: 0
                    label_withdraw:
                      description: Number of sent label withdraw messages.
                      type: integer
                      minimum: 0
                    label_release:
                      description: Number of sent label release messages.
                      type: integer
                      minimum: 0
                    label_address:
                      description: Number of sent address messages.
                      type: integer
                      minimum: 0
                    address_withdraw:
                      description: Number of sent address withdraw messages.
                      type: integer
                      minimum: 0
        timers:
          description: The timers associated with this LDP session.
          type: object
          properties:
            hold_time:
              description: The negotiated hold time in seconds.
              type: integer
            hold_timer:
              description: The hold timer value in seconds.
              type: integer
            keep_alive_time:
              description: The negotiated keep-alive time in seconds.
              type: integer
            keep_alive_timer:
              description: The keep-alive timer value in seconds.
              type: integer
    LDPInstanceSession:
      type: object
      allOf:
        - type: object
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
        - $ref: "#/components/schemas/LDPSession"
    LDPCapabilities:
      type: object
      description: Overview of LDP capabilities.
      properties:
        graceful_restart:
          description: Graceful restart capabilty status.
          type: boolean
        loop_detection:
          type: object
          description: Loop detection settings if loop detection is enabled.
          properties:
            max_hop_count:
              description: Maximum number of hops accepted.
              type: integer
            max_vector_length:
              description: Maximum vector length accepted.
              type: integer
    ARPNDPInstanceNeighbors:
      type: object
      description: ARP and NDP neighbors
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        neighbors:
          description: The ARP and NDP neighbors.
          type: array
          items:
            $ref: "#/components/schemas/ARPNDPNeighbor"
    ARPNDPNeighbor:
      type: object
      description: ARP / NDP neighbor
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        mac_address:
          description: The neighbor MAC address
          type: string
        afi:
          description: The address family
          type: string
          enum:
            - ipv4
            - ipv6
        ipv4_address:
          description: The neighbors IPv4 address
          type: string
          format: ipv4
        ipv6_address:
          description: The neighbors IPv6 address
          type: string
          format: ipv6
        auto_discovered:
          description: Flag to indicate whether the neighbor was discovered automatically
          type: boolean
        date_created:
          description: The creation time of the neighbor record
          type: string
          format: date-time
    RPKIRTRInstance:
      type: object
      description: The RPKI-RTR instance state.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        sessions:
          description: Array of RPKI-RTR sessions.
          type: array
          items:
            $ref: "#/components/schemas/RPKIRTRSessionInfo"
    RPKIRTRSessionInfo:
      type: object
      description: The RPKI-RTR session state.
      properties:
        session_state:
          description: |
            The session state.
          type: string
          enum:
            - IDLE
            - CONNECT
            - SYNC
            - ESTABLISHED
        last_state_transition:
          description: The timestamp of the last session state transition.
          type: string
          format: date-time
        rpki_cache:
          $ref: "#/components/schemas/RPKIRTRCache"
        preference:
          description: The session preference.
          type: integer
        ipv4_address:
          description: The local IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: The local IPv6 address.
          type: string
          format: ipv6
    RPKIRTRSession:
      type: object
      description: RPKI RTR session state.
      allOf:
        - $ref: "#/components/schemas/RPKIRTRSessionInfo"
        - type: object
          properties:
            instance_name:
              $ref: "#/components/schemas/InstanceName"
            timers:
              type: object
              properties:
                connect_time:
                  description: The connect timer interval in seconds.
                  type: integer
                connect_timer:
                  description: The remaining time in seconds until the connect timer fires.
                  type: integer
                refresh_time:
                  description: The refresh timer interval in seconds.
                  type: integer
                refresh_timer:
                  description: The remaining time in seconds until the refresh timer fires.
                  type: integer
                retry_time:
                  description: The retry timer interval in seconds.
                  type: integer
                retry_timer:
                  description: The remaining time in seconds until the retry timer fires.
                  type: integer
                record_expiry_time:
                  description: The record expiry timer interval in seconds.
                  type: integer
                record_expiry_timer:
                  description: The remaining time in seconds until the record expiry timer fires.
                  type: integer
            statistics:
              type: object
              properties:
                ipv4_prefix_count:
                  description: Total count of stored IPv4 prefixes.
                  type: integer
                ipv6_prefix_count:
                  description: Total count of stored IPv6 prefixes.
                  type: integer
    RPKIRTRCache:
      type: object
      description: The RPKI-RTR cache handle.
      properties:
        ipv4_address:
          description: The cache IPv4 address.
          type: string
          format: ipv4
        ipv6_address:
          description: The cache IPv6 address.
          type: string
          format: ipv6
        port:
          description: The cache network port.
          type: integer
    RPKIRTRRecord:
      type: object
      description: A RPKI-RTR database record.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        prefix:
          description: The requested prefix.
          type: string
        covering_prefix:
          description: The longest matching prefix for the request prefix.
          type: string
        asn:
          description: The AS number.
          type: integer
    UserAddressTranslations:
      type: object
      description: The address translations for a single user.
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        user:
          description: The user identifier.
          type: string
        address_translations:
          description: The list of address translations.
          type: array
          items:
            $ref: "#/components/schemas/AddressTranslation"
    AddressTranslation:
      type: object
      description: A single address translation.
      properties:
        internal_ipv4_address:
          description: The internal IPv4 address
          type: string
          format: ipv4_address
        internal_port:
          description: The internal port.
          type: integer
        external_ipv4_address:
          description: The external IPv4 address.
          type: string
          format: ipv4_string
        exernal_port:
          description: The external port.
          type: integer
        direction:
          description: The direction of traffic.
          type: string
          enum:
            - both
            - ingress
            - egress
        protocol:
          description: The network protocol.
          type: string
          enum:
            - TCP
            - UDP
            - ICMP
    FlowspecInstanceRules:
      description: All flowspec rules of a routing instance.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        ipv4:
          description: "IPv4 flowspec rules"
          type: array
          items:
            $ref: "#/components/schemas/FlowspecRule"
        ipv6:
          description: "IPv6 flowspec rules"
          type: array
          items:
            $ref: "#/components/schemas/FlowspecRule"
    FlowspecRule:
      description: A flowspec rule and its implementation status.
      type: object
      properties:
        rule_hash:
          description: The unique rule hash value.
          type: string
        rule_priority:
          description: The rule priority.
          type: integer
        applied:
          description: |
            Whether this rule is applied or not.
            A rule might not be applicable due to hardware restrictions.
            These rules are still advertised to all other BGP peers with negotiated flowspec address family.
          type: boolean
        acl_count:
          description: The number of implemented ACLs.
          type: integer
        flowspec_status:
          description: Detailed status of this flowspec rule.
          type: string
        match:
          description: The match constraints to select traffic applicable to this rule.
          type: object
          properties:
            destination_ipv4_prefix:
              description: The IPv4 destination prefix.
              type: string
            destination_ipv6_prefix:
              description: The IPv6 destination prefix.
              type: string
            source_ipv4_prefix:
              description: The IPv4 source prefix.
              type: string
            source_ipv6_prefix:
              description: The IPv6 source prefix.
              type: string
            destination_port_filter:
              description: The destination port filter expression.
              type: string
            protocol_filter:
              description: The protocol filter expression.
              type: string
        actions:
          description: The actions executed by this rule.
          type: array
          items:
            description: The action name.
            type: string
    L2VPNCrossConnect:
      description: A L2VPN cross connect state
      type: object
      properties:
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        egress:
          $ref: "#/components/schemas/L2VPNCrossConnectState"
        ingress:
          $ref: "#/components/schemas/L2VPNCrossConnectState"
    L2VPNCrossConnectState:
      description: The ingress/egress L2VPN cross-connect state.
      type: object
      properties:
        type:
          description: The cross connect type.
          type: string
        label:
          description: The MPLS label.
          type: string
        source_port:
          description: The source port.
          type: integer
        destination_port:
          description: The destination port.
          type: integer
        status:
          description: The cross-connect status.
          type: string
    L2VPNInstancePseudowires:
      description: The L2VPN pseudowires of an instance grouped by SAFI.
      type: object
      properties:
        instance_name:
          $ref: "#/components/schemas/InstanceName"
        evpn_vpws:
          type: array
          items:
            $ref: "#/components/schemas/L2VPNPseudowire"
    L2VPNPseudowire:
      description: A L2VPN pseudowire.
      type: object
      properties:
        peer_ipv4:
          description: The peer IPv4 address.
          type: string
        peer_ipv6:
          description: The peer IPv6 address.
          type: string
        route_distinguisher:
          description: The router distinguisher.
          type: string
        ifl_name:
          $ref: "#/components/schemas/IflName"
        ifp_name:
          $ref: "#/components/schemas/IfpName"
        local_service_id:
          description: The local service ID.
          type: integer
        local_l2_prefix:
          description: The local L2 prefix.
          type: string
        remote_service_id:
          description: The remote service ID.
          type: integer
        remote_l2_prefix:
          description: The remote L2 prefix.
          type: string
        pop_label:
          description: The pop label instructions.
          type: string
        push_label:
          description: The push label instructions.
          type: string
        status:
          description: The pseudowire status.
          type: string
        pseudowire_type:
          description: The pseudowire type. The type is set to UNKNOWN when the type cannot be determined due to an incomplete configuration.
          type: string
          enum:
            - LOCAL_CROSS_CONNECT
            - REMOTE_CROSS_CONNECT
            - UNKNOWN
        pseudowire_state:
          description: The pseudowire state
          type: string
          enum:
            - UP
            - REMOTE_FAILURE
            - LOCAL_FAILURE