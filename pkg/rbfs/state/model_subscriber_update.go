/*
 * RBFS Operational State API
 *
 * This contract describes the RBFS Operational State API contract defined by RBMS, the RtBrick Management System. This API is a _consumer-driven_ API, which means that all changes to this API **must be approved** by RBMS, the consumer of this API to avoid compatibility issues.  The API is kept backwards-compatible and anyone is allowed to _use_ this API.  The consumer of the API _must_ ignore additional attributes not explained in this specification. Additional attributes are _not_ considered violating backwards compatibility. In contrary, additional attributes allow extending the API while preserving backward compatibility.
 *
 * API version: 1.0.0
 * Contact: martin@rtbrick.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package state

// Subscriber update request
type SubscriberUpdate struct {
	// connection-status-message
	ConnectionStatusMessage string `json:"connection_status_message,omitempty"`
	// All dynamic QoS settings like shaper and policer rates will be reset  if the new service-profile includes a qos-profile attribute also if  active qos-profile and old qos-profile is equal. All QoS settings  remain unchanged if the referenced service profile does not include  the qos-profile attribute. If the referenced service profile updates  the qos-profile attribute and additional shaper or policer rates are  included in the same request which updates the service-profile, those  shaper and policer settings will be applied to the new QoS configuration  profile after reset. This means that we reset all incremental changes  done before. In example if Voice shaper rate has changed to another value, after profile change the default value from profile is used.
	ServiceProfile string `json:"service_profile,omitempty"`
	// All dynamic QoS settings like shaper and policer rates will be reset  if this attribute is present in the request also if new qos-profile  and old qos-profile is equal. If additional shaper or policer rates are  included in the same request which updates the qos-profile, those shaper  and policer settings will be applied to the new QoS configuration after reset.
	QosProfile string `json:"qos_profile,omitempty"`
	// The parent scheduler element of the scheduler-map assigned to the subscriber  can be selected with this attribute.
	QosParentScheduler string `json:"qos_parent_scheduler,omitempty"`
	// List of multiple shaper settings separated by semicolon. Each shaper setting contains a  shaper name, high flow rate and low flow rate separated by comma.  The actual shaper rate is the sum of high and low flow rate.
	QosShaper string `json:"qos_shaper,omitempty"`
	// List of multiple policer level settings separated by semicolon. Each setting contains a  level, cir, cbs, pir, pbs, max-cir and max-pir separated by comma.
	QosPolicer string `json:"qos_policer,omitempty"`
	// List of multiple queue settings separated by semicolon. Each queue setting contains a  queue name and queue size in bytes separated by comma.
	QosQueue string `json:"qos_queue,omitempty"`
	// The multifield classifier can be either derived from qos-profile or directly  using this attribute which has priority of the qos-profile.
	MultifieldClassifier string `json:"multifield_classifier,omitempty"`
	// Attach IPv4 subscriber ingress ACL (ACL in upstream direction).
	Ipv4AclIn string `json:"ipv4_acl_in,omitempty"`
	// Attach IPv4 subscriber egress ACL (ACL in downstream direction).
	Ipv4AclOut string `json:"ipv4_acl_out,omitempty"`
	// Attach IPv6 subscriber ingress ACL (ACL in upstream direction).
	Ipv6AclIn string `json:"ipv6_acl_in,omitempty"`
	// Attach IPv6 subscriber egress ACL (ACL in downstream direction).
	Ipv6AclOut string `json:"ipv6_acl_out,omitempty"`
	// When HTTP Redirect is enabled for a subscriber either through Ascend-Data-Filter  or through the subscriber ACLs, HTTP packets from the subscriber get redirected  to the URL set by this attribute.
	HttpRedirectUrl string `json:"http_redirect_url,omitempty"`
	// This attribute specifies the IGMP-profile to be associated with the subscriber.
	IgmpProfile string `json:"igmp_profile,omitempty"`
	// This attribute can dynamically enable or disable IGMP for a subscriber.
	IgmpStatus string `json:"igmp_status,omitempty"`
	// This attribute can specify the number of parallel multicast groups for a subscriber.
	IgmpMaxMembers int `json:"igmp_max_members,omitempty"`
	// This attribute can specify the version of IGMP for a subscriber.
	IgmpVersion int `json:"igmp_version,omitempty"`
}
